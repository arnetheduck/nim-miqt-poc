import Qt6PrintSupport_libs

{.push raises: [].}

from system/ansi_c import c_free

type
  struct_miqt_string {.used.} = object
    len: csize_t
    data: cstring

  struct_miqt_array {.used.} = object
    len: csize_t
    data: pointer

  struct_miqt_map {.used.} = object
    len: csize_t
    keys: pointer
    values: pointer

  miqt_uintptr_t {.importc: "uintptr_t", header: "stdint.h", used.} = uint
  miqt_intptr_t {.importc: "intptr_t", header: "stdint.h", used.} = int

func fromBytes(T: type string, v: openArray[byte]): string {.used.} =
  if v.len > 0:
    result = newString(v.len)
    when nimvm:
      for i, c in v:
        result[i] = cast[char](c)
    else:
      copyMem(addr result[0], unsafeAddr v[0], v.len)

const cflags = gorge("pkg-config -cflags Qt6PrintSupport")
{.compile("gen_qsciscintillabase.cpp", cflags).}


type QsciScintillaBaseEnum* = cint
const
  QsciScintillaBaseSCI_START* = 2000
  QsciScintillaBaseSCI_OPTIONAL_START* = 3000
  QsciScintillaBaseSCI_LEXER_START* = 4000
  QsciScintillaBaseSCI_ADDTEXT* = 2001
  QsciScintillaBaseSCI_ADDSTYLEDTEXT* = 2002
  QsciScintillaBaseSCI_INSERTTEXT* = 2003
  QsciScintillaBaseSCI_CLEARALL* = 2004
  QsciScintillaBaseSCI_CLEARDOCUMENTSTYLE* = 2005
  QsciScintillaBaseSCI_GETLENGTH* = 2006
  QsciScintillaBaseSCI_GETCHARAT* = 2007
  QsciScintillaBaseSCI_GETCURRENTPOS* = 2008
  QsciScintillaBaseSCI_GETANCHOR* = 2009
  QsciScintillaBaseSCI_GETSTYLEAT* = 2010
  QsciScintillaBaseSCI_REDO* = 2011
  QsciScintillaBaseSCI_SETUNDOCOLLECTION* = 2012
  QsciScintillaBaseSCI_SELECTALL* = 2013
  QsciScintillaBaseSCI_SETSAVEPOINT* = 2014
  QsciScintillaBaseSCI_GETSTYLEDTEXT* = 2015
  QsciScintillaBaseSCI_CANREDO* = 2016
  QsciScintillaBaseSCI_MARKERLINEFROMHANDLE* = 2017
  QsciScintillaBaseSCI_MARKERDELETEHANDLE* = 2018
  QsciScintillaBaseSCI_GETUNDOCOLLECTION* = 2019
  QsciScintillaBaseSCI_GETVIEWWS* = 2020
  QsciScintillaBaseSCI_SETVIEWWS* = 2021
  QsciScintillaBaseSCI_POSITIONFROMPOINT* = 2022
  QsciScintillaBaseSCI_POSITIONFROMPOINTCLOSE* = 2023
  QsciScintillaBaseSCI_GOTOLINE* = 2024
  QsciScintillaBaseSCI_GOTOPOS* = 2025
  QsciScintillaBaseSCI_SETANCHOR* = 2026
  QsciScintillaBaseSCI_GETCURLINE* = 2027
  QsciScintillaBaseSCI_GETENDSTYLED* = 2028
  QsciScintillaBaseSCI_CONVERTEOLS* = 2029
  QsciScintillaBaseSCI_GETEOLMODE* = 2030
  QsciScintillaBaseSCI_SETEOLMODE* = 2031
  QsciScintillaBaseSCI_STARTSTYLING* = 2032
  QsciScintillaBaseSCI_SETSTYLING* = 2033
  QsciScintillaBaseSCI_GETBUFFEREDDRAW* = 2034
  QsciScintillaBaseSCI_SETBUFFEREDDRAW* = 2035
  QsciScintillaBaseSCI_SETTABWIDTH* = 2036
  QsciScintillaBaseSCI_GETTABWIDTH* = 2121
  QsciScintillaBaseSCI_SETCODEPAGE* = 2037
  QsciScintillaBaseSCI_MARKERDEFINE* = 2040
  QsciScintillaBaseSCI_MARKERSETFORE* = 2041
  QsciScintillaBaseSCI_MARKERSETBACK* = 2042
  QsciScintillaBaseSCI_MARKERADD* = 2043
  QsciScintillaBaseSCI_MARKERDELETE* = 2044
  QsciScintillaBaseSCI_MARKERDELETEALL* = 2045
  QsciScintillaBaseSCI_MARKERGET* = 2046
  QsciScintillaBaseSCI_MARKERNEXT* = 2047
  QsciScintillaBaseSCI_MARKERPREVIOUS* = 2048
  QsciScintillaBaseSCI_MARKERDEFINEPIXMAP* = 2049
  QsciScintillaBaseSCI_SETMARGINTYPEN* = 2240
  QsciScintillaBaseSCI_GETMARGINTYPEN* = 2241
  QsciScintillaBaseSCI_SETMARGINWIDTHN* = 2242
  QsciScintillaBaseSCI_GETMARGINWIDTHN* = 2243
  QsciScintillaBaseSCI_SETMARGINMASKN* = 2244
  QsciScintillaBaseSCI_GETMARGINMASKN* = 2245
  QsciScintillaBaseSCI_SETMARGINSENSITIVEN* = 2246
  QsciScintillaBaseSCI_GETMARGINSENSITIVEN* = 2247
  QsciScintillaBaseSCI_SETMARGINCURSORN* = 2248
  QsciScintillaBaseSCI_GETMARGINCURSORN* = 2249
  QsciScintillaBaseSCI_STYLECLEARALL* = 2050
  QsciScintillaBaseSCI_STYLESETFORE* = 2051
  QsciScintillaBaseSCI_STYLESETBACK* = 2052
  QsciScintillaBaseSCI_STYLESETBOLD* = 2053
  QsciScintillaBaseSCI_STYLESETITALIC* = 2054
  QsciScintillaBaseSCI_STYLESETSIZE* = 2055
  QsciScintillaBaseSCI_STYLESETFONT* = 2056
  QsciScintillaBaseSCI_STYLESETEOLFILLED* = 2057
  QsciScintillaBaseSCI_STYLERESETDEFAULT* = 2058
  QsciScintillaBaseSCI_STYLESETUNDERLINE* = 2059
  QsciScintillaBaseSCI_STYLESETCASE* = 2060
  QsciScintillaBaseSCI_STYLESETSIZEFRACTIONAL* = 2061
  QsciScintillaBaseSCI_STYLEGETSIZEFRACTIONAL* = 2062
  QsciScintillaBaseSCI_STYLESETWEIGHT* = 2063
  QsciScintillaBaseSCI_STYLEGETWEIGHT* = 2064
  QsciScintillaBaseSCI_STYLESETCHARACTERSET* = 2066
  QsciScintillaBaseSCI_SETSELFORE* = 2067
  QsciScintillaBaseSCI_SETSELBACK* = 2068
  QsciScintillaBaseSCI_SETCARETFORE* = 2069
  QsciScintillaBaseSCI_ASSIGNCMDKEY* = 2070
  QsciScintillaBaseSCI_CLEARCMDKEY* = 2071
  QsciScintillaBaseSCI_CLEARALLCMDKEYS* = 2072
  QsciScintillaBaseSCI_SETSTYLINGEX* = 2073
  QsciScintillaBaseSCI_STYLESETVISIBLE* = 2074
  QsciScintillaBaseSCI_GETCARETPERIOD* = 2075
  QsciScintillaBaseSCI_SETCARETPERIOD* = 2076
  QsciScintillaBaseSCI_SETWORDCHARS* = 2077
  QsciScintillaBaseSCI_BEGINUNDOACTION* = 2078
  QsciScintillaBaseSCI_ENDUNDOACTION* = 2079
  QsciScintillaBaseSCI_INDICSETSTYLE* = 2080
  QsciScintillaBaseSCI_INDICGETSTYLE* = 2081
  QsciScintillaBaseSCI_INDICSETFORE* = 2082
  QsciScintillaBaseSCI_INDICGETFORE* = 2083
  QsciScintillaBaseSCI_SETWHITESPACEFORE* = 2084
  QsciScintillaBaseSCI_SETWHITESPACEBACK* = 2085
  QsciScintillaBaseSCI_SETWHITESPACESIZE* = 2086
  QsciScintillaBaseSCI_GETWHITESPACESIZE* = 2087
  QsciScintillaBaseSCI_SETSTYLEBITS* = 2090
  QsciScintillaBaseSCI_GETSTYLEBITS* = 2091
  QsciScintillaBaseSCI_SETLINESTATE* = 2092
  QsciScintillaBaseSCI_GETLINESTATE* = 2093
  QsciScintillaBaseSCI_GETMAXLINESTATE* = 2094
  QsciScintillaBaseSCI_GETCARETLINEVISIBLE* = 2095
  QsciScintillaBaseSCI_SETCARETLINEVISIBLE* = 2096
  QsciScintillaBaseSCI_GETCARETLINEBACK* = 2097
  QsciScintillaBaseSCI_SETCARETLINEBACK* = 2098
  QsciScintillaBaseSCI_STYLESETCHANGEABLE* = 2099
  QsciScintillaBaseSCI_AUTOCSHOW* = 2100
  QsciScintillaBaseSCI_AUTOCCANCEL* = 2101
  QsciScintillaBaseSCI_AUTOCACTIVE* = 2102
  QsciScintillaBaseSCI_AUTOCPOSSTART* = 2103
  QsciScintillaBaseSCI_AUTOCCOMPLETE* = 2104
  QsciScintillaBaseSCI_AUTOCSTOPS* = 2105
  QsciScintillaBaseSCI_AUTOCSETSEPARATOR* = 2106
  QsciScintillaBaseSCI_AUTOCGETSEPARATOR* = 2107
  QsciScintillaBaseSCI_AUTOCSELECT* = 2108
  QsciScintillaBaseSCI_AUTOCSETCANCELATSTART* = 2110
  QsciScintillaBaseSCI_AUTOCGETCANCELATSTART* = 2111
  QsciScintillaBaseSCI_AUTOCSETFILLUPS* = 2112
  QsciScintillaBaseSCI_AUTOCSETCHOOSESINGLE* = 2113
  QsciScintillaBaseSCI_AUTOCGETCHOOSESINGLE* = 2114
  QsciScintillaBaseSCI_AUTOCSETIGNORECASE* = 2115
  QsciScintillaBaseSCI_AUTOCGETIGNORECASE* = 2116
  QsciScintillaBaseSCI_USERLISTSHOW* = 2117
  QsciScintillaBaseSCI_AUTOCSETAUTOHIDE* = 2118
  QsciScintillaBaseSCI_AUTOCGETAUTOHIDE* = 2119
  QsciScintillaBaseSCI_AUTOCSETDROPRESTOFWORD* = 2270
  QsciScintillaBaseSCI_AUTOCGETDROPRESTOFWORD* = 2271
  QsciScintillaBaseSCI_SETINDENT* = 2122
  QsciScintillaBaseSCI_GETINDENT* = 2123
  QsciScintillaBaseSCI_SETUSETABS* = 2124
  QsciScintillaBaseSCI_GETUSETABS* = 2125
  QsciScintillaBaseSCI_SETLINEINDENTATION* = 2126
  QsciScintillaBaseSCI_GETLINEINDENTATION* = 2127
  QsciScintillaBaseSCI_GETLINEINDENTPOSITION* = 2128
  QsciScintillaBaseSCI_GETCOLUMN* = 2129
  QsciScintillaBaseSCI_SETHSCROLLBAR* = 2130
  QsciScintillaBaseSCI_GETHSCROLLBAR* = 2131
  QsciScintillaBaseSCI_SETINDENTATIONGUIDES* = 2132
  QsciScintillaBaseSCI_GETINDENTATIONGUIDES* = 2133
  QsciScintillaBaseSCI_SETHIGHLIGHTGUIDE* = 2134
  QsciScintillaBaseSCI_GETHIGHLIGHTGUIDE* = 2135
  QsciScintillaBaseSCI_GETLINEENDPOSITION* = 2136
  QsciScintillaBaseSCI_GETCODEPAGE* = 2137
  QsciScintillaBaseSCI_GETCARETFORE* = 2138
  QsciScintillaBaseSCI_GETREADONLY* = 2140
  QsciScintillaBaseSCI_SETCURRENTPOS* = 2141
  QsciScintillaBaseSCI_SETSELECTIONSTART* = 2142
  QsciScintillaBaseSCI_GETSELECTIONSTART* = 2143
  QsciScintillaBaseSCI_SETSELECTIONEND* = 2144
  QsciScintillaBaseSCI_GETSELECTIONEND* = 2145
  QsciScintillaBaseSCI_SETPRINTMAGNIFICATION* = 2146
  QsciScintillaBaseSCI_GETPRINTMAGNIFICATION* = 2147
  QsciScintillaBaseSCI_SETPRINTCOLOURMODE* = 2148
  QsciScintillaBaseSCI_GETPRINTCOLOURMODE* = 2149
  QsciScintillaBaseSCI_FINDTEXT* = 2150
  QsciScintillaBaseSCI_FORMATRANGE* = 2151
  QsciScintillaBaseSCI_GETFIRSTVISIBLELINE* = 2152
  QsciScintillaBaseSCI_GETLINE* = 2153
  QsciScintillaBaseSCI_GETLINECOUNT* = 2154
  QsciScintillaBaseSCI_SETMARGINLEFT* = 2155
  QsciScintillaBaseSCI_GETMARGINLEFT* = 2156
  QsciScintillaBaseSCI_SETMARGINRIGHT* = 2157
  QsciScintillaBaseSCI_GETMARGINRIGHT* = 2158
  QsciScintillaBaseSCI_GETMODIFY* = 2159
  QsciScintillaBaseSCI_SETSEL* = 2160
  QsciScintillaBaseSCI_GETSELTEXT* = 2161
  QsciScintillaBaseSCI_GETTEXTRANGE* = 2162
  QsciScintillaBaseSCI_HIDESELECTION* = 2163
  QsciScintillaBaseSCI_POINTXFROMPOSITION* = 2164
  QsciScintillaBaseSCI_POINTYFROMPOSITION* = 2165
  QsciScintillaBaseSCI_LINEFROMPOSITION* = 2166
  QsciScintillaBaseSCI_POSITIONFROMLINE* = 2167
  QsciScintillaBaseSCI_LINESCROLL* = 2168
  QsciScintillaBaseSCI_SCROLLCARET* = 2169
  QsciScintillaBaseSCI_REPLACESEL* = 2170
  QsciScintillaBaseSCI_SETREADONLY* = 2171
  QsciScintillaBaseSCI_NULL* = 2172
  QsciScintillaBaseSCI_CANPASTE* = 2173
  QsciScintillaBaseSCI_CANUNDO* = 2174
  QsciScintillaBaseSCI_EMPTYUNDOBUFFER* = 2175
  QsciScintillaBaseSCI_UNDO* = 2176
  QsciScintillaBaseSCI_CUT* = 2177
  QsciScintillaBaseSCI_COPY* = 2178
  QsciScintillaBaseSCI_PASTE* = 2179
  QsciScintillaBaseSCI_CLEAR* = 2180
  QsciScintillaBaseSCI_SETTEXT* = 2181
  QsciScintillaBaseSCI_GETTEXT* = 2182
  QsciScintillaBaseSCI_GETTEXTLENGTH* = 2183
  QsciScintillaBaseSCI_GETDIRECTFUNCTION* = 2184
  QsciScintillaBaseSCI_GETDIRECTPOINTER* = 2185
  QsciScintillaBaseSCI_SETOVERTYPE* = 2186
  QsciScintillaBaseSCI_GETOVERTYPE* = 2187
  QsciScintillaBaseSCI_SETCARETWIDTH* = 2188
  QsciScintillaBaseSCI_GETCARETWIDTH* = 2189
  QsciScintillaBaseSCI_SETTARGETSTART* = 2190
  QsciScintillaBaseSCI_GETTARGETSTART* = 2191
  QsciScintillaBaseSCI_SETTARGETEND* = 2192
  QsciScintillaBaseSCI_GETTARGETEND* = 2193
  QsciScintillaBaseSCI_REPLACETARGET* = 2194
  QsciScintillaBaseSCI_REPLACETARGETRE* = 2195
  QsciScintillaBaseSCI_SEARCHINTARGET* = 2197
  QsciScintillaBaseSCI_SETSEARCHFLAGS* = 2198
  QsciScintillaBaseSCI_GETSEARCHFLAGS* = 2199
  QsciScintillaBaseSCI_CALLTIPSHOW* = 2200
  QsciScintillaBaseSCI_CALLTIPCANCEL* = 2201
  QsciScintillaBaseSCI_CALLTIPACTIVE* = 2202
  QsciScintillaBaseSCI_CALLTIPPOSSTART* = 2203
  QsciScintillaBaseSCI_CALLTIPSETHLT* = 2204
  QsciScintillaBaseSCI_CALLTIPSETBACK* = 2205
  QsciScintillaBaseSCI_CALLTIPSETFORE* = 2206
  QsciScintillaBaseSCI_CALLTIPSETFOREHLT* = 2207
  QsciScintillaBaseSCI_AUTOCSETMAXWIDTH* = 2208
  QsciScintillaBaseSCI_AUTOCGETMAXWIDTH* = 2209
  QsciScintillaBaseSCI_AUTOCSETMAXHEIGHT* = 2210
  QsciScintillaBaseSCI_AUTOCGETMAXHEIGHT* = 2211
  QsciScintillaBaseSCI_CALLTIPUSESTYLE* = 2212
  QsciScintillaBaseSCI_CALLTIPSETPOSITION* = 2213
  QsciScintillaBaseSCI_CALLTIPSETPOSSTART* = 2214
  QsciScintillaBaseSCI_VISIBLEFROMDOCLINE* = 2220
  QsciScintillaBaseSCI_DOCLINEFROMVISIBLE* = 2221
  QsciScintillaBaseSCI_SETFOLDLEVEL* = 2222
  QsciScintillaBaseSCI_GETFOLDLEVEL* = 2223
  QsciScintillaBaseSCI_GETLASTCHILD* = 2224
  QsciScintillaBaseSCI_GETFOLDPARENT* = 2225
  QsciScintillaBaseSCI_SHOWLINES* = 2226
  QsciScintillaBaseSCI_HIDELINES* = 2227
  QsciScintillaBaseSCI_GETLINEVISIBLE* = 2228
  QsciScintillaBaseSCI_SETFOLDEXPANDED* = 2229
  QsciScintillaBaseSCI_GETFOLDEXPANDED* = 2230
  QsciScintillaBaseSCI_TOGGLEFOLD* = 2231
  QsciScintillaBaseSCI_ENSUREVISIBLE* = 2232
  QsciScintillaBaseSCI_SETFOLDFLAGS* = 2233
  QsciScintillaBaseSCI_ENSUREVISIBLEENFORCEPOLICY* = 2234
  QsciScintillaBaseSCI_WRAPCOUNT* = 2235
  QsciScintillaBaseSCI_GETALLLINESVISIBLE* = 2236
  QsciScintillaBaseSCI_FOLDLINE* = 2237
  QsciScintillaBaseSCI_FOLDCHILDREN* = 2238
  QsciScintillaBaseSCI_EXPANDCHILDREN* = 2239
  QsciScintillaBaseSCI_SETMARGINBACKN* = 2250
  QsciScintillaBaseSCI_GETMARGINBACKN* = 2251
  QsciScintillaBaseSCI_SETMARGINS* = 2252
  QsciScintillaBaseSCI_GETMARGINS* = 2253
  QsciScintillaBaseSCI_SETTABINDENTS* = 2260
  QsciScintillaBaseSCI_GETTABINDENTS* = 2261
  QsciScintillaBaseSCI_SETBACKSPACEUNINDENTS* = 2262
  QsciScintillaBaseSCI_GETBACKSPACEUNINDENTS* = 2263
  QsciScintillaBaseSCI_SETMOUSEDWELLTIME* = 2264
  QsciScintillaBaseSCI_GETMOUSEDWELLTIME* = 2265
  QsciScintillaBaseSCI_WORDSTARTPOSITION* = 2266
  QsciScintillaBaseSCI_WORDENDPOSITION* = 2267
  QsciScintillaBaseSCI_SETWRAPMODE* = 2268
  QsciScintillaBaseSCI_GETWRAPMODE* = 2269
  QsciScintillaBaseSCI_SETLAYOUTCACHE* = 2272
  QsciScintillaBaseSCI_GETLAYOUTCACHE* = 2273
  QsciScintillaBaseSCI_SETSCROLLWIDTH* = 2274
  QsciScintillaBaseSCI_GETSCROLLWIDTH* = 2275
  QsciScintillaBaseSCI_TEXTWIDTH* = 2276
  QsciScintillaBaseSCI_SETENDATLASTLINE* = 2277
  QsciScintillaBaseSCI_GETENDATLASTLINE* = 2278
  QsciScintillaBaseSCI_TEXTHEIGHT* = 2279
  QsciScintillaBaseSCI_SETVSCROLLBAR* = 2280
  QsciScintillaBaseSCI_GETVSCROLLBAR* = 2281
  QsciScintillaBaseSCI_APPENDTEXT* = 2282
  QsciScintillaBaseSCI_GETTWOPHASEDRAW* = 2283
  QsciScintillaBaseSCI_SETTWOPHASEDRAW* = 2284
  QsciScintillaBaseSCI_AUTOCGETTYPESEPARATOR* = 2285
  QsciScintillaBaseSCI_AUTOCSETTYPESEPARATOR* = 2286
  QsciScintillaBaseSCI_TARGETFROMSELECTION* = 2287
  QsciScintillaBaseSCI_LINESJOIN* = 2288
  QsciScintillaBaseSCI_LINESSPLIT* = 2289
  QsciScintillaBaseSCI_SETFOLDMARGINCOLOUR* = 2290
  QsciScintillaBaseSCI_SETFOLDMARGINHICOLOUR* = 2291
  QsciScintillaBaseSCI_MARKERSETBACKSELECTED* = 2292
  QsciScintillaBaseSCI_MARKERENABLEHIGHLIGHT* = 2293
  QsciScintillaBaseSCI_LINEDOWN* = 2300
  QsciScintillaBaseSCI_LINEDOWNEXTEND* = 2301
  QsciScintillaBaseSCI_LINEUP* = 2302
  QsciScintillaBaseSCI_LINEUPEXTEND* = 2303
  QsciScintillaBaseSCI_CHARLEFT* = 2304
  QsciScintillaBaseSCI_CHARLEFTEXTEND* = 2305
  QsciScintillaBaseSCI_CHARRIGHT* = 2306
  QsciScintillaBaseSCI_CHARRIGHTEXTEND* = 2307
  QsciScintillaBaseSCI_WORDLEFT* = 2308
  QsciScintillaBaseSCI_WORDLEFTEXTEND* = 2309
  QsciScintillaBaseSCI_WORDRIGHT* = 2310
  QsciScintillaBaseSCI_WORDRIGHTEXTEND* = 2311
  QsciScintillaBaseSCI_HOME* = 2312
  QsciScintillaBaseSCI_HOMEEXTEND* = 2313
  QsciScintillaBaseSCI_LINEEND* = 2314
  QsciScintillaBaseSCI_LINEENDEXTEND* = 2315
  QsciScintillaBaseSCI_DOCUMENTSTART* = 2316
  QsciScintillaBaseSCI_DOCUMENTSTARTEXTEND* = 2317
  QsciScintillaBaseSCI_DOCUMENTEND* = 2318
  QsciScintillaBaseSCI_DOCUMENTENDEXTEND* = 2319
  QsciScintillaBaseSCI_PAGEUP* = 2320
  QsciScintillaBaseSCI_PAGEUPEXTEND* = 2321
  QsciScintillaBaseSCI_PAGEDOWN* = 2322
  QsciScintillaBaseSCI_PAGEDOWNEXTEND* = 2323
  QsciScintillaBaseSCI_EDITTOGGLEOVERTYPE* = 2324
  QsciScintillaBaseSCI_CANCEL* = 2325
  QsciScintillaBaseSCI_DELETEBACK* = 2326
  QsciScintillaBaseSCI_TAB* = 2327
  QsciScintillaBaseSCI_BACKTAB* = 2328
  QsciScintillaBaseSCI_NEWLINE* = 2329
  QsciScintillaBaseSCI_FORMFEED* = 2330
  QsciScintillaBaseSCI_VCHOME* = 2331
  QsciScintillaBaseSCI_VCHOMEEXTEND* = 2332
  QsciScintillaBaseSCI_ZOOMIN* = 2333
  QsciScintillaBaseSCI_ZOOMOUT* = 2334
  QsciScintillaBaseSCI_DELWORDLEFT* = 2335
  QsciScintillaBaseSCI_DELWORDRIGHT* = 2336
  QsciScintillaBaseSCI_LINECUT* = 2337
  QsciScintillaBaseSCI_LINEDELETE* = 2338
  QsciScintillaBaseSCI_LINETRANSPOSE* = 2339
  QsciScintillaBaseSCI_LOWERCASE* = 2340
  QsciScintillaBaseSCI_UPPERCASE* = 2341
  QsciScintillaBaseSCI_LINESCROLLDOWN* = 2342
  QsciScintillaBaseSCI_LINESCROLLUP* = 2343
  QsciScintillaBaseSCI_DELETEBACKNOTLINE* = 2344
  QsciScintillaBaseSCI_HOMEDISPLAY* = 2345
  QsciScintillaBaseSCI_HOMEDISPLAYEXTEND* = 2346
  QsciScintillaBaseSCI_LINEENDDISPLAY* = 2347
  QsciScintillaBaseSCI_LINEENDDISPLAYEXTEND* = 2348
  QsciScintillaBaseSCI_MOVECARETINSIDEVIEW* = 2401
  QsciScintillaBaseSCI_LINELENGTH* = 2350
  QsciScintillaBaseSCI_BRACEHIGHLIGHT* = 2351
  QsciScintillaBaseSCI_BRACEBADLIGHT* = 2352
  QsciScintillaBaseSCI_BRACEMATCH* = 2353
  QsciScintillaBaseSCI_LINEREVERSE* = 2354
  QsciScintillaBaseSCI_GETVIEWEOL* = 2355
  QsciScintillaBaseSCI_SETVIEWEOL* = 2356
  QsciScintillaBaseSCI_GETDOCPOINTER* = 2357
  QsciScintillaBaseSCI_SETDOCPOINTER* = 2358
  QsciScintillaBaseSCI_SETMODEVENTMASK* = 2359
  QsciScintillaBaseSCI_GETEDGECOLUMN* = 2360
  QsciScintillaBaseSCI_SETEDGECOLUMN* = 2361
  QsciScintillaBaseSCI_GETEDGEMODE* = 2362
  QsciScintillaBaseSCI_SETEDGEMODE* = 2363
  QsciScintillaBaseSCI_GETEDGECOLOUR* = 2364
  QsciScintillaBaseSCI_SETEDGECOLOUR* = 2365
  QsciScintillaBaseSCI_SEARCHANCHOR* = 2366
  QsciScintillaBaseSCI_SEARCHNEXT* = 2367
  QsciScintillaBaseSCI_SEARCHPREV* = 2368
  QsciScintillaBaseSCI_LINESONSCREEN* = 2370
  QsciScintillaBaseSCI_USEPOPUP* = 2371
  QsciScintillaBaseSCI_SELECTIONISRECTANGLE* = 2372
  QsciScintillaBaseSCI_SETZOOM* = 2373
  QsciScintillaBaseSCI_GETZOOM* = 2374
  QsciScintillaBaseSCI_CREATEDOCUMENT* = 2375
  QsciScintillaBaseSCI_ADDREFDOCUMENT* = 2376
  QsciScintillaBaseSCI_RELEASEDOCUMENT* = 2377
  QsciScintillaBaseSCI_GETMODEVENTMASK* = 2378
  QsciScintillaBaseSCI_SETFOCUS* = 2380
  QsciScintillaBaseSCI_GETFOCUS* = 2381
  QsciScintillaBaseSCI_SETSTATUS* = 2382
  QsciScintillaBaseSCI_GETSTATUS* = 2383
  QsciScintillaBaseSCI_SETMOUSEDOWNCAPTURES* = 2384
  QsciScintillaBaseSCI_GETMOUSEDOWNCAPTURES* = 2385
  QsciScintillaBaseSCI_SETCURSOR* = 2386
  QsciScintillaBaseSCI_GETCURSOR* = 2387
  QsciScintillaBaseSCI_SETCONTROLCHARSYMBOL* = 2388
  QsciScintillaBaseSCI_GETCONTROLCHARSYMBOL* = 2389
  QsciScintillaBaseSCI_WORDPARTLEFT* = 2390
  QsciScintillaBaseSCI_WORDPARTLEFTEXTEND* = 2391
  QsciScintillaBaseSCI_WORDPARTRIGHT* = 2392
  QsciScintillaBaseSCI_WORDPARTRIGHTEXTEND* = 2393
  QsciScintillaBaseSCI_SETVISIBLEPOLICY* = 2394
  QsciScintillaBaseSCI_DELLINELEFT* = 2395
  QsciScintillaBaseSCI_DELLINERIGHT* = 2396
  QsciScintillaBaseSCI_SETXOFFSET* = 2397
  QsciScintillaBaseSCI_GETXOFFSET* = 2398
  QsciScintillaBaseSCI_CHOOSECARETX* = 2399
  QsciScintillaBaseSCI_GRABFOCUS* = 2400
  QsciScintillaBaseSCI_SETXCARETPOLICY* = 2402
  QsciScintillaBaseSCI_SETYCARETPOLICY* = 2403
  QsciScintillaBaseSCI_LINEDUPLICATE* = 2404
  QsciScintillaBaseSCI_REGISTERIMAGE* = 2405
  QsciScintillaBaseSCI_SETPRINTWRAPMODE* = 2406
  QsciScintillaBaseSCI_GETPRINTWRAPMODE* = 2407
  QsciScintillaBaseSCI_CLEARREGISTEREDIMAGES* = 2408
  QsciScintillaBaseSCI_STYLESETHOTSPOT* = 2409
  QsciScintillaBaseSCI_SETHOTSPOTACTIVEFORE* = 2410
  QsciScintillaBaseSCI_SETHOTSPOTACTIVEBACK* = 2411
  QsciScintillaBaseSCI_SETHOTSPOTACTIVEUNDERLINE* = 2412
  QsciScintillaBaseSCI_PARADOWN* = 2413
  QsciScintillaBaseSCI_PARADOWNEXTEND* = 2414
  QsciScintillaBaseSCI_PARAUP* = 2415
  QsciScintillaBaseSCI_PARAUPEXTEND* = 2416
  QsciScintillaBaseSCI_POSITIONBEFORE* = 2417
  QsciScintillaBaseSCI_POSITIONAFTER* = 2418
  QsciScintillaBaseSCI_COPYRANGE* = 2419
  QsciScintillaBaseSCI_COPYTEXT* = 2420
  QsciScintillaBaseSCI_SETHOTSPOTSINGLELINE* = 2421
  QsciScintillaBaseSCI_SETSELECTIONMODE* = 2422
  QsciScintillaBaseSCI_GETSELECTIONMODE* = 2423
  QsciScintillaBaseSCI_GETLINESELSTARTPOSITION* = 2424
  QsciScintillaBaseSCI_GETLINESELENDPOSITION* = 2425
  QsciScintillaBaseSCI_LINEDOWNRECTEXTEND* = 2426
  QsciScintillaBaseSCI_LINEUPRECTEXTEND* = 2427
  QsciScintillaBaseSCI_CHARLEFTRECTEXTEND* = 2428
  QsciScintillaBaseSCI_CHARRIGHTRECTEXTEND* = 2429
  QsciScintillaBaseSCI_HOMERECTEXTEND* = 2430
  QsciScintillaBaseSCI_VCHOMERECTEXTEND* = 2431
  QsciScintillaBaseSCI_LINEENDRECTEXTEND* = 2432
  QsciScintillaBaseSCI_PAGEUPRECTEXTEND* = 2433
  QsciScintillaBaseSCI_PAGEDOWNRECTEXTEND* = 2434
  QsciScintillaBaseSCI_STUTTEREDPAGEUP* = 2435
  QsciScintillaBaseSCI_STUTTEREDPAGEUPEXTEND* = 2436
  QsciScintillaBaseSCI_STUTTEREDPAGEDOWN* = 2437
  QsciScintillaBaseSCI_STUTTEREDPAGEDOWNEXTEND* = 2438
  QsciScintillaBaseSCI_WORDLEFTEND* = 2439
  QsciScintillaBaseSCI_WORDLEFTENDEXTEND* = 2440
  QsciScintillaBaseSCI_WORDRIGHTEND* = 2441
  QsciScintillaBaseSCI_WORDRIGHTENDEXTEND* = 2442
  QsciScintillaBaseSCI_SETWHITESPACECHARS* = 2443
  QsciScintillaBaseSCI_SETCHARSDEFAULT* = 2444
  QsciScintillaBaseSCI_AUTOCGETCURRENT* = 2445
  QsciScintillaBaseSCI_ALLOCATE* = 2446
  QsciScintillaBaseSCI_HOMEWRAP* = 2349
  QsciScintillaBaseSCI_HOMEWRAPEXTEND* = 2450
  QsciScintillaBaseSCI_LINEENDWRAP* = 2451
  QsciScintillaBaseSCI_LINEENDWRAPEXTEND* = 2452
  QsciScintillaBaseSCI_VCHOMEWRAP* = 2453
  QsciScintillaBaseSCI_VCHOMEWRAPEXTEND* = 2454
  QsciScintillaBaseSCI_LINECOPY* = 2455
  QsciScintillaBaseSCI_FINDCOLUMN* = 2456
  QsciScintillaBaseSCI_GETCARETSTICKY* = 2457
  QsciScintillaBaseSCI_SETCARETSTICKY* = 2458
  QsciScintillaBaseSCI_TOGGLECARETSTICKY* = 2459
  QsciScintillaBaseSCI_SETWRAPVISUALFLAGS* = 2460
  QsciScintillaBaseSCI_GETWRAPVISUALFLAGS* = 2461
  QsciScintillaBaseSCI_SETWRAPVISUALFLAGSLOCATION* = 2462
  QsciScintillaBaseSCI_GETWRAPVISUALFLAGSLOCATION* = 2463
  QsciScintillaBaseSCI_SETWRAPSTARTINDENT* = 2464
  QsciScintillaBaseSCI_GETWRAPSTARTINDENT* = 2465
  QsciScintillaBaseSCI_MARKERADDSET* = 2466
  QsciScintillaBaseSCI_SETPASTECONVERTENDINGS* = 2467
  QsciScintillaBaseSCI_GETPASTECONVERTENDINGS* = 2468
  QsciScintillaBaseSCI_SELECTIONDUPLICATE* = 2469
  QsciScintillaBaseSCI_SETCARETLINEBACKALPHA* = 2470
  QsciScintillaBaseSCI_GETCARETLINEBACKALPHA* = 2471
  QsciScintillaBaseSCI_SETWRAPINDENTMODE* = 2472
  QsciScintillaBaseSCI_GETWRAPINDENTMODE* = 2473
  QsciScintillaBaseSCI_MARKERSETALPHA* = 2476
  QsciScintillaBaseSCI_GETSELALPHA* = 2477
  QsciScintillaBaseSCI_SETSELALPHA* = 2478
  QsciScintillaBaseSCI_GETSELEOLFILLED* = 2479
  QsciScintillaBaseSCI_SETSELEOLFILLED* = 2480
  QsciScintillaBaseSCI_STYLEGETFORE* = 2481
  QsciScintillaBaseSCI_STYLEGETBACK* = 2482
  QsciScintillaBaseSCI_STYLEGETBOLD* = 2483
  QsciScintillaBaseSCI_STYLEGETITALIC* = 2484
  QsciScintillaBaseSCI_STYLEGETSIZE* = 2485
  QsciScintillaBaseSCI_STYLEGETFONT* = 2486
  QsciScintillaBaseSCI_STYLEGETEOLFILLED* = 2487
  QsciScintillaBaseSCI_STYLEGETUNDERLINE* = 2488
  QsciScintillaBaseSCI_STYLEGETCASE* = 2489
  QsciScintillaBaseSCI_STYLEGETCHARACTERSET* = 2490
  QsciScintillaBaseSCI_STYLEGETVISIBLE* = 2491
  QsciScintillaBaseSCI_STYLEGETCHANGEABLE* = 2492
  QsciScintillaBaseSCI_STYLEGETHOTSPOT* = 2493
  QsciScintillaBaseSCI_GETHOTSPOTACTIVEFORE* = 2494
  QsciScintillaBaseSCI_GETHOTSPOTACTIVEBACK* = 2495
  QsciScintillaBaseSCI_GETHOTSPOTACTIVEUNDERLINE* = 2496
  QsciScintillaBaseSCI_GETHOTSPOTSINGLELINE* = 2497
  QsciScintillaBaseSCI_BRACEHIGHLIGHTINDICATOR* = 2498
  QsciScintillaBaseSCI_BRACEBADLIGHTINDICATOR* = 2499
  QsciScintillaBaseSCI_SETINDICATORCURRENT* = 2500
  QsciScintillaBaseSCI_GETINDICATORCURRENT* = 2501
  QsciScintillaBaseSCI_SETINDICATORVALUE* = 2502
  QsciScintillaBaseSCI_GETINDICATORVALUE* = 2503
  QsciScintillaBaseSCI_INDICATORFILLRANGE* = 2504
  QsciScintillaBaseSCI_INDICATORCLEARRANGE* = 2505
  QsciScintillaBaseSCI_INDICATORALLONFOR* = 2506
  QsciScintillaBaseSCI_INDICATORVALUEAT* = 2507
  QsciScintillaBaseSCI_INDICATORSTART* = 2508
  QsciScintillaBaseSCI_INDICATOREND* = 2509
  QsciScintillaBaseSCI_INDICSETUNDER* = 2510
  QsciScintillaBaseSCI_INDICGETUNDER* = 2511
  QsciScintillaBaseSCI_SETCARETSTYLE* = 2512
  QsciScintillaBaseSCI_GETCARETSTYLE* = 2513
  QsciScintillaBaseSCI_SETPOSITIONCACHE* = 2514
  QsciScintillaBaseSCI_GETPOSITIONCACHE* = 2515
  QsciScintillaBaseSCI_SETSCROLLWIDTHTRACKING* = 2516
  QsciScintillaBaseSCI_GETSCROLLWIDTHTRACKING* = 2517
  QsciScintillaBaseSCI_DELWORDRIGHTEND* = 2518
  QsciScintillaBaseSCI_COPYALLOWLINE* = 2519
  QsciScintillaBaseSCI_GETCHARACTERPOINTER* = 2520
  QsciScintillaBaseSCI_INDICSETALPHA* = 2523
  QsciScintillaBaseSCI_INDICGETALPHA* = 2524
  QsciScintillaBaseSCI_SETEXTRAASCENT* = 2525
  QsciScintillaBaseSCI_GETEXTRAASCENT* = 2526
  QsciScintillaBaseSCI_SETEXTRADESCENT* = 2527
  QsciScintillaBaseSCI_GETEXTRADESCENT* = 2528
  QsciScintillaBaseSCI_MARKERSYMBOLDEFINED* = 2529
  QsciScintillaBaseSCI_MARGINSETTEXT* = 2530
  QsciScintillaBaseSCI_MARGINGETTEXT* = 2531
  QsciScintillaBaseSCI_MARGINSETSTYLE* = 2532
  QsciScintillaBaseSCI_MARGINGETSTYLE* = 2533
  QsciScintillaBaseSCI_MARGINSETSTYLES* = 2534
  QsciScintillaBaseSCI_MARGINGETSTYLES* = 2535
  QsciScintillaBaseSCI_MARGINTEXTCLEARALL* = 2536
  QsciScintillaBaseSCI_MARGINSETSTYLEOFFSET* = 2537
  QsciScintillaBaseSCI_MARGINGETSTYLEOFFSET* = 2538
  QsciScintillaBaseSCI_SETMARGINOPTIONS* = 2539
  QsciScintillaBaseSCI_ANNOTATIONSETTEXT* = 2540
  QsciScintillaBaseSCI_ANNOTATIONGETTEXT* = 2541
  QsciScintillaBaseSCI_ANNOTATIONSETSTYLE* = 2542
  QsciScintillaBaseSCI_ANNOTATIONGETSTYLE* = 2543
  QsciScintillaBaseSCI_ANNOTATIONSETSTYLES* = 2544
  QsciScintillaBaseSCI_ANNOTATIONGETSTYLES* = 2545
  QsciScintillaBaseSCI_ANNOTATIONGETLINES* = 2546
  QsciScintillaBaseSCI_ANNOTATIONCLEARALL* = 2547
  QsciScintillaBaseSCI_ANNOTATIONSETVISIBLE* = 2548
  QsciScintillaBaseSCI_ANNOTATIONGETVISIBLE* = 2549
  QsciScintillaBaseSCI_ANNOTATIONSETSTYLEOFFSET* = 2550
  QsciScintillaBaseSCI_ANNOTATIONGETSTYLEOFFSET* = 2551
  QsciScintillaBaseSCI_RELEASEALLEXTENDEDSTYLES* = 2552
  QsciScintillaBaseSCI_ALLOCATEEXTENDEDSTYLES* = 2553
  QsciScintillaBaseSCI_SETEMPTYSELECTION* = 2556
  QsciScintillaBaseSCI_GETMARGINOPTIONS* = 2557
  QsciScintillaBaseSCI_INDICSETOUTLINEALPHA* = 2558
  QsciScintillaBaseSCI_INDICGETOUTLINEALPHA* = 2559
  QsciScintillaBaseSCI_ADDUNDOACTION* = 2560
  QsciScintillaBaseSCI_CHARPOSITIONFROMPOINT* = 2561
  QsciScintillaBaseSCI_CHARPOSITIONFROMPOINTCLOSE* = 2562
  QsciScintillaBaseSCI_SETMULTIPLESELECTION* = 2563
  QsciScintillaBaseSCI_GETMULTIPLESELECTION* = 2564
  QsciScintillaBaseSCI_SETADDITIONALSELECTIONTYPING* = 2565
  QsciScintillaBaseSCI_GETADDITIONALSELECTIONTYPING* = 2566
  QsciScintillaBaseSCI_SETADDITIONALCARETSBLINK* = 2567
  QsciScintillaBaseSCI_GETADDITIONALCARETSBLINK* = 2568
  QsciScintillaBaseSCI_SCROLLRANGE* = 2569
  QsciScintillaBaseSCI_GETSELECTIONS* = 2570
  QsciScintillaBaseSCI_CLEARSELECTIONS* = 2571
  QsciScintillaBaseSCI_SETSELECTION* = 2572
  QsciScintillaBaseSCI_ADDSELECTION* = 2573
  QsciScintillaBaseSCI_SETMAINSELECTION* = 2574
  QsciScintillaBaseSCI_GETMAINSELECTION* = 2575
  QsciScintillaBaseSCI_SETSELECTIONNCARET* = 2576
  QsciScintillaBaseSCI_GETSELECTIONNCARET* = 2577
  QsciScintillaBaseSCI_SETSELECTIONNANCHOR* = 2578
  QsciScintillaBaseSCI_GETSELECTIONNANCHOR* = 2579
  QsciScintillaBaseSCI_SETSELECTIONNCARETVIRTUALSPACE* = 2580
  QsciScintillaBaseSCI_GETSELECTIONNCARETVIRTUALSPACE* = 2581
  QsciScintillaBaseSCI_SETSELECTIONNANCHORVIRTUALSPACE* = 2582
  QsciScintillaBaseSCI_GETSELECTIONNANCHORVIRTUALSPACE* = 2583
  QsciScintillaBaseSCI_SETSELECTIONNSTART* = 2584
  QsciScintillaBaseSCI_GETSELECTIONNSTART* = 2585
  QsciScintillaBaseSCI_SETSELECTIONNEND* = 2586
  QsciScintillaBaseSCI_GETSELECTIONNEND* = 2587
  QsciScintillaBaseSCI_SETRECTANGULARSELECTIONCARET* = 2588
  QsciScintillaBaseSCI_GETRECTANGULARSELECTIONCARET* = 2589
  QsciScintillaBaseSCI_SETRECTANGULARSELECTIONANCHOR* = 2590
  QsciScintillaBaseSCI_GETRECTANGULARSELECTIONANCHOR* = 2591
  QsciScintillaBaseSCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE* = 2592
  QsciScintillaBaseSCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE* = 2593
  QsciScintillaBaseSCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE* = 2594
  QsciScintillaBaseSCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE* = 2595
  QsciScintillaBaseSCI_SETVIRTUALSPACEOPTIONS* = 2596
  QsciScintillaBaseSCI_GETVIRTUALSPACEOPTIONS* = 2597
  QsciScintillaBaseSCI_SETRECTANGULARSELECTIONMODIFIER* = 2598
  QsciScintillaBaseSCI_GETRECTANGULARSELECTIONMODIFIER* = 2599
  QsciScintillaBaseSCI_SETADDITIONALSELFORE* = 2600
  QsciScintillaBaseSCI_SETADDITIONALSELBACK* = 2601
  QsciScintillaBaseSCI_SETADDITIONALSELALPHA* = 2602
  QsciScintillaBaseSCI_GETADDITIONALSELALPHA* = 2603
  QsciScintillaBaseSCI_SETADDITIONALCARETFORE* = 2604
  QsciScintillaBaseSCI_GETADDITIONALCARETFORE* = 2605
  QsciScintillaBaseSCI_ROTATESELECTION* = 2606
  QsciScintillaBaseSCI_SWAPMAINANCHORCARET* = 2607
  QsciScintillaBaseSCI_SETADDITIONALCARETSVISIBLE* = 2608
  QsciScintillaBaseSCI_GETADDITIONALCARETSVISIBLE* = 2609
  QsciScintillaBaseSCI_AUTOCGETCURRENTTEXT* = 2610
  QsciScintillaBaseSCI_SETFONTQUALITY* = 2611
  QsciScintillaBaseSCI_GETFONTQUALITY* = 2612
  QsciScintillaBaseSCI_SETFIRSTVISIBLELINE* = 2613
  QsciScintillaBaseSCI_SETMULTIPASTE* = 2614
  QsciScintillaBaseSCI_GETMULTIPASTE* = 2615
  QsciScintillaBaseSCI_GETTAG* = 2616
  QsciScintillaBaseSCI_CHANGELEXERSTATE* = 2617
  QsciScintillaBaseSCI_CONTRACTEDFOLDNEXT* = 2618
  QsciScintillaBaseSCI_VERTICALCENTRECARET* = 2619
  QsciScintillaBaseSCI_MOVESELECTEDLINESUP* = 2620
  QsciScintillaBaseSCI_MOVESELECTEDLINESDOWN* = 2621
  QsciScintillaBaseSCI_SETIDENTIFIER* = 2622
  QsciScintillaBaseSCI_GETIDENTIFIER* = 2623
  QsciScintillaBaseSCI_RGBAIMAGESETWIDTH* = 2624
  QsciScintillaBaseSCI_RGBAIMAGESETHEIGHT* = 2625
  QsciScintillaBaseSCI_MARKERDEFINERGBAIMAGE* = 2626
  QsciScintillaBaseSCI_REGISTERRGBAIMAGE* = 2627
  QsciScintillaBaseSCI_SCROLLTOSTART* = 2628
  QsciScintillaBaseSCI_SCROLLTOEND* = 2629
  QsciScintillaBaseSCI_SETTECHNOLOGY* = 2630
  QsciScintillaBaseSCI_GETTECHNOLOGY* = 2631
  QsciScintillaBaseSCI_CREATELOADER* = 2632
  QsciScintillaBaseSCI_COUNTCHARACTERS* = 2633
  QsciScintillaBaseSCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR* = 2634
  QsciScintillaBaseSCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR* = 2635
  QsciScintillaBaseSCI_AUTOCSETMULTI* = 2636
  QsciScintillaBaseSCI_AUTOCGETMULTI* = 2637
  QsciScintillaBaseSCI_FINDINDICATORSHOW* = 2640
  QsciScintillaBaseSCI_FINDINDICATORFLASH* = 2641
  QsciScintillaBaseSCI_FINDINDICATORHIDE* = 2642
  QsciScintillaBaseSCI_GETRANGEPOINTER* = 2643
  QsciScintillaBaseSCI_GETGAPPOSITION* = 2644
  QsciScintillaBaseSCI_DELETERANGE* = 2645
  QsciScintillaBaseSCI_GETWORDCHARS* = 2646
  QsciScintillaBaseSCI_GETWHITESPACECHARS* = 2647
  QsciScintillaBaseSCI_SETPUNCTUATIONCHARS* = 2648
  QsciScintillaBaseSCI_GETPUNCTUATIONCHARS* = 2649
  QsciScintillaBaseSCI_GETSELECTIONEMPTY* = 2650
  QsciScintillaBaseSCI_RGBAIMAGESETSCALE* = 2651
  QsciScintillaBaseSCI_VCHOMEDISPLAY* = 2652
  QsciScintillaBaseSCI_VCHOMEDISPLAYEXTEND* = 2653
  QsciScintillaBaseSCI_GETCARETLINEVISIBLEALWAYS* = 2654
  QsciScintillaBaseSCI_SETCARETLINEVISIBLEALWAYS* = 2655
  QsciScintillaBaseSCI_SETLINEENDTYPESALLOWED* = 2656
  QsciScintillaBaseSCI_GETLINEENDTYPESALLOWED* = 2657
  QsciScintillaBaseSCI_GETLINEENDTYPESACTIVE* = 2658
  QsciScintillaBaseSCI_AUTOCSETORDER* = 2660
  QsciScintillaBaseSCI_AUTOCGETORDER* = 2661
  QsciScintillaBaseSCI_FOLDALL* = 2662
  QsciScintillaBaseSCI_SETAUTOMATICFOLD* = 2663
  QsciScintillaBaseSCI_GETAUTOMATICFOLD* = 2664
  QsciScintillaBaseSCI_SETREPRESENTATION* = 2665
  QsciScintillaBaseSCI_GETREPRESENTATION* = 2666
  QsciScintillaBaseSCI_CLEARREPRESENTATION* = 2667
  QsciScintillaBaseSCI_SETMOUSESELECTIONRECTANGULARSWITCH* = 2668
  QsciScintillaBaseSCI_GETMOUSESELECTIONRECTANGULARSWITCH* = 2669
  QsciScintillaBaseSCI_POSITIONRELATIVE* = 2670
  QsciScintillaBaseSCI_DROPSELECTIONN* = 2671
  QsciScintillaBaseSCI_CHANGEINSERTION* = 2672
  QsciScintillaBaseSCI_GETPHASESDRAW* = 2673
  QsciScintillaBaseSCI_SETPHASESDRAW* = 2674
  QsciScintillaBaseSCI_CLEARTABSTOPS* = 2675
  QsciScintillaBaseSCI_ADDTABSTOP* = 2676
  QsciScintillaBaseSCI_GETNEXTTABSTOP* = 2677
  QsciScintillaBaseSCI_GETIMEINTERACTION* = 2678
  QsciScintillaBaseSCI_SETIMEINTERACTION* = 2679
  QsciScintillaBaseSCI_INDICSETHOVERSTYLE* = 2680
  QsciScintillaBaseSCI_INDICGETHOVERSTYLE* = 2681
  QsciScintillaBaseSCI_INDICSETHOVERFORE* = 2682
  QsciScintillaBaseSCI_INDICGETHOVERFORE* = 2683
  QsciScintillaBaseSCI_INDICSETFLAGS* = 2684
  QsciScintillaBaseSCI_INDICGETFLAGS* = 2685
  QsciScintillaBaseSCI_SETTARGETRANGE* = 2686
  QsciScintillaBaseSCI_GETTARGETTEXT* = 2687
  QsciScintillaBaseSCI_MULTIPLESELECTADDNEXT* = 2688
  QsciScintillaBaseSCI_MULTIPLESELECTADDEACH* = 2689
  QsciScintillaBaseSCI_TARGETWHOLEDOCUMENT* = 2690
  QsciScintillaBaseSCI_ISRANGEWORD* = 2691
  QsciScintillaBaseSCI_SETIDLESTYLING* = 2692
  QsciScintillaBaseSCI_GETIDLESTYLING* = 2693
  QsciScintillaBaseSCI_MULTIEDGEADDLINE* = 2694
  QsciScintillaBaseSCI_MULTIEDGECLEARALL* = 2695
  QsciScintillaBaseSCI_SETMOUSEWHEELCAPTURES* = 2696
  QsciScintillaBaseSCI_GETMOUSEWHEELCAPTURES* = 2697
  QsciScintillaBaseSCI_GETTABDRAWMODE* = 2698
  QsciScintillaBaseSCI_SETTABDRAWMODE* = 2699
  QsciScintillaBaseSCI_TOGGLEFOLDSHOWTEXT* = 2700
  QsciScintillaBaseSCI_FOLDDISPLAYTEXTSETSTYLE* = 2701
  QsciScintillaBaseSCI_SETACCESSIBILITY* = 2702
  QsciScintillaBaseSCI_GETACCESSIBILITY* = 2703
  QsciScintillaBaseSCI_GETCARETLINEFRAME* = 2704
  QsciScintillaBaseSCI_SETCARETLINEFRAME* = 2705
  QsciScintillaBaseSCI_STARTRECORD* = 3001
  QsciScintillaBaseSCI_STOPRECORD* = 3002
  QsciScintillaBaseSCI_SETLEXER* = 4001
  QsciScintillaBaseSCI_GETLEXER* = 4002
  QsciScintillaBaseSCI_COLOURISE* = 4003
  QsciScintillaBaseSCI_SETPROPERTY* = 4004
  QsciScintillaBaseSCI_SETKEYWORDS* = 4005
  QsciScintillaBaseSCI_SETLEXERLANGUAGE* = 4006
  QsciScintillaBaseSCI_LOADLEXERLIBRARY* = 4007
  QsciScintillaBaseSCI_GETPROPERTY* = 4008
  QsciScintillaBaseSCI_GETPROPERTYEXPANDED* = 4009
  QsciScintillaBaseSCI_GETPROPERTYINT* = 4010
  QsciScintillaBaseSCI_GETSTYLEBITSNEEDED* = 4011
  QsciScintillaBaseSCI_GETLEXERLANGUAGE* = 4012
  QsciScintillaBaseSCI_PRIVATELEXERCALL* = 4013
  QsciScintillaBaseSCI_PROPERTYNAMES* = 4014
  QsciScintillaBaseSCI_PROPERTYTYPE* = 4015
  QsciScintillaBaseSCI_DESCRIBEPROPERTY* = 4016
  QsciScintillaBaseSCI_DESCRIBEKEYWORDSETS* = 4017
  QsciScintillaBaseSCI_GETLINEENDTYPESSUPPORTED* = 4018
  QsciScintillaBaseSCI_ALLOCATESUBSTYLES* = 4020
  QsciScintillaBaseSCI_GETSUBSTYLESSTART* = 4021
  QsciScintillaBaseSCI_GETSUBSTYLESLENGTH* = 4022
  QsciScintillaBaseSCI_GETSTYLEFROMSUBSTYLE* = 4027
  QsciScintillaBaseSCI_GETPRIMARYSTYLEFROMSTYLE* = 4028
  QsciScintillaBaseSCI_FREESUBSTYLES* = 4023
  QsciScintillaBaseSCI_SETIDENTIFIERS* = 4024
  QsciScintillaBaseSCI_DISTANCETOSECONDARYSTYLES* = 4025
  QsciScintillaBaseSCI_GETSUBSTYLEBASES* = 4026
  QsciScintillaBaseSCI_GETLINECHARACTERINDEX* = 2710
  QsciScintillaBaseSCI_ALLOCATELINECHARACTERINDEX* = 2711
  QsciScintillaBaseSCI_RELEASELINECHARACTERINDEX* = 2712
  QsciScintillaBaseSCI_LINEFROMINDEXPOSITION* = 2713
  QsciScintillaBaseSCI_INDEXPOSITIONFROMLINE* = 2714
  QsciScintillaBaseSCI_COUNTCODEUNITS* = 2715
  QsciScintillaBaseSCI_POSITIONRELATIVECODEUNITS* = 2716
  QsciScintillaBaseSCI_GETNAMEDSTYLES* = 4029
  QsciScintillaBaseSCI_NAMEOFSTYLE* = 4030
  QsciScintillaBaseSCI_TAGSOFSTYLE* = 4031
  QsciScintillaBaseSCI_DESCRIPTIONOFSTYLE* = 4032
  QsciScintillaBaseSCI_GETMOVEEXTENDSSELECTION* = 2706
  QsciScintillaBaseSCI_SETCOMMANDEVENTS* = 2717
  QsciScintillaBaseSCI_GETCOMMANDEVENTS* = 2718
  QsciScintillaBaseSCI_GETDOCUMENTOPTIONS* = 2379
  QsciScintillaBaseSC_AC_FILLUP* = 1
  QsciScintillaBaseSC_AC_DOUBLECLICK* = 2
  QsciScintillaBaseSC_AC_TAB* = 3
  QsciScintillaBaseSC_AC_NEWLINE* = 4
  QsciScintillaBaseSC_AC_COMMAND* = 5
  QsciScintillaBaseSC_ALPHA_TRANSPARENT* = 0
  QsciScintillaBaseSC_ALPHA_OPAQUE* = 255
  QsciScintillaBaseSC_ALPHA_NOALPHA* = 256
  QsciScintillaBaseSC_CARETSTICKY_OFF* = 0
  QsciScintillaBaseSC_CARETSTICKY_ON* = 1
  QsciScintillaBaseSC_CARETSTICKY_WHITESPACE* = 2
  QsciScintillaBaseSC_DOCUMENTOPTION_DEFAULT* = 0
  QsciScintillaBaseSC_DOCUMENTOPTION_STYLES_NONE* = 1
  QsciScintillaBaseSC_DOCUMENTOPTION_TEXT_LARGE* = 256
  QsciScintillaBaseSC_EFF_QUALITY_MASK* = 15
  QsciScintillaBaseSC_EFF_QUALITY_DEFAULT* = 0
  QsciScintillaBaseSC_EFF_QUALITY_NON_ANTIALIASED* = 1
  QsciScintillaBaseSC_EFF_QUALITY_ANTIALIASED* = 2
  QsciScintillaBaseSC_EFF_QUALITY_LCD_OPTIMIZED* = 3
  QsciScintillaBaseSC_IDLESTYLING_NONE* = 0
  QsciScintillaBaseSC_IDLESTYLING_TOVISIBLE* = 1
  QsciScintillaBaseSC_IDLESTYLING_AFTERVISIBLE* = 2
  QsciScintillaBaseSC_IDLESTYLING_ALL* = 3
  QsciScintillaBaseSC_IME_WINDOWED* = 0
  QsciScintillaBaseSC_IME_INLINE* = 1
  QsciScintillaBaseSC_LINECHARACTERINDEX_NONE* = 0
  QsciScintillaBaseSC_LINECHARACTERINDEX_UTF32* = 1
  QsciScintillaBaseSC_LINECHARACTERINDEX_UTF16* = 2
  QsciScintillaBaseSC_MARGINOPTION_NONE* = 0
  QsciScintillaBaseSC_MARGINOPTION_SUBLINESELECT* = 1
  QsciScintillaBaseSC_MULTIAUTOC_ONCE* = 0
  QsciScintillaBaseSC_MULTIAUTOC_EACH* = 1
  QsciScintillaBaseSC_MULTIPASTE_ONCE* = 0
  QsciScintillaBaseSC_MULTIPASTE_EACH* = 1
  QsciScintillaBaseSC_POPUP_NEVER* = 0
  QsciScintillaBaseSC_POPUP_ALL* = 1
  QsciScintillaBaseSC_POPUP_TEXT* = 2
  QsciScintillaBaseSC_SEL_STREAM* = 0
  QsciScintillaBaseSC_SEL_RECTANGLE* = 1
  QsciScintillaBaseSC_SEL_LINES* = 2
  QsciScintillaBaseSC_SEL_THIN* = 3
  QsciScintillaBaseSC_STATUS_OK* = 0
  QsciScintillaBaseSC_STATUS_FAILURE* = 1
  QsciScintillaBaseSC_STATUS_BADALLOC* = 2
  QsciScintillaBaseSC_STATUS_WARN_START* = 1000
  QsciScintillaBaseSC_STATUS_WARNREGEX* = 1001
  QsciScintillaBaseSC_TYPE_BOOLEAN* = 0
  QsciScintillaBaseSC_TYPE_INTEGER* = 1
  QsciScintillaBaseSC_TYPE_STRING* = 2
  QsciScintillaBaseSC_UPDATE_CONTENT* = 1
  QsciScintillaBaseSC_UPDATE_SELECTION* = 2
  QsciScintillaBaseSC_UPDATE_V_SCROLL* = 4
  QsciScintillaBaseSC_UPDATE_H_SCROLL* = 8
  QsciScintillaBaseSC_WRAPVISUALFLAG_NONE* = 0
  QsciScintillaBaseSC_WRAPVISUALFLAG_END* = 1
  QsciScintillaBaseSC_WRAPVISUALFLAG_START* = 2
  QsciScintillaBaseSC_WRAPVISUALFLAG_MARGIN* = 4
  QsciScintillaBaseSC_WRAPVISUALFLAGLOC_DEFAULT* = 0
  QsciScintillaBaseSC_WRAPVISUALFLAGLOC_END_BY_TEXT* = 1
  QsciScintillaBaseSC_WRAPVISUALFLAGLOC_START_BY_TEXT* = 2
  QsciScintillaBaseSCTD_LONGARROW* = 0
  QsciScintillaBaseSCTD_STRIKEOUT* = 1
  QsciScintillaBaseSCVS_NONE* = 0
  QsciScintillaBaseSCVS_RECTANGULARSELECTION* = 1
  QsciScintillaBaseSCVS_USERACCESSIBLE* = 2
  QsciScintillaBaseSCVS_NOWRAPLINESTART* = 4
  QsciScintillaBaseSCWS_INVISIBLE* = 0
  QsciScintillaBaseSCWS_VISIBLEALWAYS* = 1
  QsciScintillaBaseSCWS_VISIBLEAFTERINDENT* = 2
  QsciScintillaBaseSCWS_VISIBLEONLYININDENT* = 3
  QsciScintillaBaseSC_EOL_CRLF* = 0
  QsciScintillaBaseSC_EOL_CR* = 1
  QsciScintillaBaseSC_EOL_LF* = 2
  QsciScintillaBaseSC_CP_DBCS* = 1
  QsciScintillaBaseSC_CP_UTF8* = 65001
  QsciScintillaBaseSC_MARK_CIRCLE* = 0
  QsciScintillaBaseSC_MARK_ROUNDRECT* = 1
  QsciScintillaBaseSC_MARK_ARROW* = 2
  QsciScintillaBaseSC_MARK_SMALLRECT* = 3
  QsciScintillaBaseSC_MARK_SHORTARROW* = 4
  QsciScintillaBaseSC_MARK_EMPTY* = 5
  QsciScintillaBaseSC_MARK_ARROWDOWN* = 6
  QsciScintillaBaseSC_MARK_MINUS* = 7
  QsciScintillaBaseSC_MARK_PLUS* = 8
  QsciScintillaBaseSC_MARK_VLINE* = 9
  QsciScintillaBaseSC_MARK_LCORNER* = 10
  QsciScintillaBaseSC_MARK_TCORNER* = 11
  QsciScintillaBaseSC_MARK_BOXPLUS* = 12
  QsciScintillaBaseSC_MARK_BOXPLUSCONNECTED* = 13
  QsciScintillaBaseSC_MARK_BOXMINUS* = 14
  QsciScintillaBaseSC_MARK_BOXMINUSCONNECTED* = 15
  QsciScintillaBaseSC_MARK_LCORNERCURVE* = 16
  QsciScintillaBaseSC_MARK_TCORNERCURVE* = 17
  QsciScintillaBaseSC_MARK_CIRCLEPLUS* = 18
  QsciScintillaBaseSC_MARK_CIRCLEPLUSCONNECTED* = 19
  QsciScintillaBaseSC_MARK_CIRCLEMINUS* = 20
  QsciScintillaBaseSC_MARK_CIRCLEMINUSCONNECTED* = 21
  QsciScintillaBaseSC_MARK_BACKGROUND* = 22
  QsciScintillaBaseSC_MARK_DOTDOTDOT* = 23
  QsciScintillaBaseSC_MARK_ARROWS* = 24
  QsciScintillaBaseSC_MARK_PIXMAP* = 25
  QsciScintillaBaseSC_MARK_FULLRECT* = 26
  QsciScintillaBaseSC_MARK_LEFTRECT* = 27
  QsciScintillaBaseSC_MARK_AVAILABLE* = 28
  QsciScintillaBaseSC_MARK_UNDERLINE* = 29
  QsciScintillaBaseSC_MARK_RGBAIMAGE* = 30
  QsciScintillaBaseSC_MARK_BOOKMARK* = 31
  QsciScintillaBaseSC_MARK_CHARACTER* = 10000
  QsciScintillaBaseSC_MARKNUM_FOLDEREND* = 25
  QsciScintillaBaseSC_MARKNUM_FOLDEROPENMID* = 26
  QsciScintillaBaseSC_MARKNUM_FOLDERMIDTAIL* = 27
  QsciScintillaBaseSC_MARKNUM_FOLDERTAIL* = 28
  QsciScintillaBaseSC_MARKNUM_FOLDERSUB* = 29
  QsciScintillaBaseSC_MARKNUM_FOLDER* = 30
  QsciScintillaBaseSC_MARKNUM_FOLDEROPEN* = 31
  QsciScintillaBaseSC_MASK_FOLDERS* = 4261412864
  QsciScintillaBaseSC_MARGIN_SYMBOL* = 0
  QsciScintillaBaseSC_MARGIN_NUMBER* = 1
  QsciScintillaBaseSC_MARGIN_BACK* = 2
  QsciScintillaBaseSC_MARGIN_FORE* = 3
  QsciScintillaBaseSC_MARGIN_TEXT* = 4
  QsciScintillaBaseSC_MARGIN_RTEXT* = 5
  QsciScintillaBaseSC_MARGIN_COLOUR* = 6
  QsciScintillaBaseSTYLE_DEFAULT* = 32
  QsciScintillaBaseSTYLE_LINENUMBER* = 33
  QsciScintillaBaseSTYLE_BRACELIGHT* = 34
  QsciScintillaBaseSTYLE_BRACEBAD* = 35
  QsciScintillaBaseSTYLE_CONTROLCHAR* = 36
  QsciScintillaBaseSTYLE_INDENTGUIDE* = 37
  QsciScintillaBaseSTYLE_CALLTIP* = 38
  QsciScintillaBaseSTYLE_FOLDDISPLAYTEXT* = 39
  QsciScintillaBaseSTYLE_LASTPREDEFINED* = 39
  QsciScintillaBaseSTYLE_MAX* = 255
  QsciScintillaBaseSC_CHARSET_ANSI* = 0
  QsciScintillaBaseSC_CHARSET_DEFAULT* = 1
  QsciScintillaBaseSC_CHARSET_BALTIC* = 186
  QsciScintillaBaseSC_CHARSET_CHINESEBIG5* = 136
  QsciScintillaBaseSC_CHARSET_EASTEUROPE* = 238
  QsciScintillaBaseSC_CHARSET_GB2312* = 134
  QsciScintillaBaseSC_CHARSET_GREEK* = 161
  QsciScintillaBaseSC_CHARSET_HANGUL* = 129
  QsciScintillaBaseSC_CHARSET_MAC* = 77
  QsciScintillaBaseSC_CHARSET_OEM* = 255
  QsciScintillaBaseSC_CHARSET_RUSSIAN* = 204
  QsciScintillaBaseSC_CHARSET_OEM866* = 866
  QsciScintillaBaseSC_CHARSET_CYRILLIC* = 1251
  QsciScintillaBaseSC_CHARSET_SHIFTJIS* = 128
  QsciScintillaBaseSC_CHARSET_SYMBOL* = 2
  QsciScintillaBaseSC_CHARSET_TURKISH* = 162
  QsciScintillaBaseSC_CHARSET_JOHAB* = 130
  QsciScintillaBaseSC_CHARSET_HEBREW* = 177
  QsciScintillaBaseSC_CHARSET_ARABIC* = 178
  QsciScintillaBaseSC_CHARSET_VIETNAMESE* = 163
  QsciScintillaBaseSC_CHARSET_THAI* = 222
  QsciScintillaBaseSC_CHARSET_8859_15* = 1000
  QsciScintillaBaseSC_CASE_MIXED* = 0
  QsciScintillaBaseSC_CASE_UPPER* = 1
  QsciScintillaBaseSC_CASE_LOWER* = 2
  QsciScintillaBaseSC_CASE_CAMEL* = 3
  QsciScintillaBaseSC_IV_NONE* = 0
  QsciScintillaBaseSC_IV_REAL* = 1
  QsciScintillaBaseSC_IV_LOOKFORWARD* = 2
  QsciScintillaBaseSC_IV_LOOKBOTH* = 3
  QsciScintillaBaseINDIC_PLAIN* = 0
  QsciScintillaBaseINDIC_SQUIGGLE* = 1
  QsciScintillaBaseINDIC_TT* = 2
  QsciScintillaBaseINDIC_DIAGONAL* = 3
  QsciScintillaBaseINDIC_STRIKE* = 4
  QsciScintillaBaseINDIC_HIDDEN* = 5
  QsciScintillaBaseINDIC_BOX* = 6
  QsciScintillaBaseINDIC_ROUNDBOX* = 7
  QsciScintillaBaseINDIC_STRAIGHTBOX* = 8
  QsciScintillaBaseINDIC_DASH* = 9
  QsciScintillaBaseINDIC_DOTS* = 10
  QsciScintillaBaseINDIC_SQUIGGLELOW* = 11
  QsciScintillaBaseINDIC_DOTBOX* = 12
  QsciScintillaBaseINDIC_SQUIGGLEPIXMAP* = 13
  QsciScintillaBaseINDIC_COMPOSITIONTHICK* = 14
  QsciScintillaBaseINDIC_COMPOSITIONTHIN* = 15
  QsciScintillaBaseINDIC_FULLBOX* = 16
  QsciScintillaBaseINDIC_TEXTFORE* = 17
  QsciScintillaBaseINDIC_POINT* = 18
  QsciScintillaBaseINDIC_POINTCHARACTER* = 19
  QsciScintillaBaseINDIC_GRADIENT* = 20
  QsciScintillaBaseINDIC_GRADIENTCENTRE* = 21
  QsciScintillaBaseINDIC_IME* = 32
  QsciScintillaBaseINDIC_IME_MAX* = 35
  QsciScintillaBaseINDIC_CONTAINER* = 8
  QsciScintillaBaseINDIC_MAX* = 35
  QsciScintillaBaseINDIC0_MASK* = 32
  QsciScintillaBaseINDIC1_MASK* = 64
  QsciScintillaBaseINDIC2_MASK* = 128
  QsciScintillaBaseINDICS_MASK* = 224
  QsciScintillaBaseSC_INDICVALUEBIT* = 16777216
  QsciScintillaBaseSC_INDICVALUEMASK* = 16777215
  QsciScintillaBaseSC_INDICFLAG_VALUEBEFORE* = 1
  QsciScintillaBaseSC_PRINT_NORMAL* = 0
  QsciScintillaBaseSC_PRINT_INVERTLIGHT* = 1
  QsciScintillaBaseSC_PRINT_BLACKONWHITE* = 2
  QsciScintillaBaseSC_PRINT_COLOURONWHITE* = 3
  QsciScintillaBaseSC_PRINT_COLOURONWHITEDEFAULTBG* = 4
  QsciScintillaBaseSC_PRINT_SCREENCOLOURS* = 5
  QsciScintillaBaseSCFIND_WHOLEWORD* = 2
  QsciScintillaBaseSCFIND_MATCHCASE* = 4
  QsciScintillaBaseSCFIND_WORDSTART* = 1048576
  QsciScintillaBaseSCFIND_REGEXP* = 2097152
  QsciScintillaBaseSCFIND_POSIX* = 4194304
  QsciScintillaBaseSCFIND_CXX11REGEX* = 8388608
  QsciScintillaBaseSC_FOLDDISPLAYTEXT_HIDDEN* = 0
  QsciScintillaBaseSC_FOLDDISPLAYTEXT_STANDARD* = 1
  QsciScintillaBaseSC_FOLDDISPLAYTEXT_BOXED* = 2
  QsciScintillaBaseSC_FOLDLEVELBASE* = 1024
  QsciScintillaBaseSC_FOLDLEVELWHITEFLAG* = 4096
  QsciScintillaBaseSC_FOLDLEVELHEADERFLAG* = 8192
  QsciScintillaBaseSC_FOLDLEVELNUMBERMASK* = 4095
  QsciScintillaBaseSC_FOLDFLAG_LINEBEFORE_EXPANDED* = 2
  QsciScintillaBaseSC_FOLDFLAG_LINEBEFORE_CONTRACTED* = 4
  QsciScintillaBaseSC_FOLDFLAG_LINEAFTER_EXPANDED* = 8
  QsciScintillaBaseSC_FOLDFLAG_LINEAFTER_CONTRACTED* = 16
  QsciScintillaBaseSC_FOLDFLAG_LEVELNUMBERS* = 64
  QsciScintillaBaseSC_FOLDFLAG_LINESTATE* = 128
  QsciScintillaBaseSC_LINE_END_TYPE_DEFAULT* = 0
  QsciScintillaBaseSC_LINE_END_TYPE_UNICODE* = 1
  QsciScintillaBaseSC_TIME_FOREVER* = 10000000
  QsciScintillaBaseSC_WRAP_NONE* = 0
  QsciScintillaBaseSC_WRAP_WORD* = 1
  QsciScintillaBaseSC_WRAP_CHAR* = 2
  QsciScintillaBaseSC_WRAP_WHITESPACE* = 3
  QsciScintillaBaseSC_WRAPINDENT_FIXED* = 0
  QsciScintillaBaseSC_WRAPINDENT_SAME* = 1
  QsciScintillaBaseSC_WRAPINDENT_INDENT* = 2
  QsciScintillaBaseSC_WRAPINDENT_DEEPINDENT* = 3
  QsciScintillaBaseSC_CACHE_NONE* = 0
  QsciScintillaBaseSC_CACHE_CARET* = 1
  QsciScintillaBaseSC_CACHE_PAGE* = 2
  QsciScintillaBaseSC_CACHE_DOCUMENT* = 3
  QsciScintillaBaseSC_PHASES_ONE* = 0
  QsciScintillaBaseSC_PHASES_TWO* = 1
  QsciScintillaBaseSC_PHASES_MULTIPLE* = 2
  QsciScintillaBaseANNOTATION_HIDDEN* = 0
  QsciScintillaBaseANNOTATION_STANDARD* = 1
  QsciScintillaBaseANNOTATION_BOXED* = 2
  QsciScintillaBaseANNOTATION_INDENTED* = 3
  QsciScintillaBaseEDGE_NONE* = 0
  QsciScintillaBaseEDGE_LINE* = 1
  QsciScintillaBaseEDGE_BACKGROUND* = 2
  QsciScintillaBaseEDGE_MULTILINE* = 3
  QsciScintillaBaseSC_CURSORNORMAL* = -1
  QsciScintillaBaseSC_CURSORARROW* = 2
  QsciScintillaBaseSC_CURSORWAIT* = 4
  QsciScintillaBaseSC_CURSORREVERSEARROW* = 7
  QsciScintillaBaseUNDO_MAY_COALESCE* = 1
  QsciScintillaBaseVISIBLE_SLOP* = 1
  QsciScintillaBaseVISIBLE_STRICT* = 4
  QsciScintillaBaseCARET_SLOP* = 1
  QsciScintillaBaseCARET_STRICT* = 4
  QsciScintillaBaseCARET_JUMPS* = 16
  QsciScintillaBaseCARET_EVEN* = 8
  QsciScintillaBaseCARETSTYLE_INVISIBLE* = 0
  QsciScintillaBaseCARETSTYLE_LINE* = 1
  QsciScintillaBaseCARETSTYLE_BLOCK* = 2
  QsciScintillaBaseSC_MOD_INSERTTEXT* = 1
  QsciScintillaBaseSC_MOD_DELETETEXT* = 2
  QsciScintillaBaseSC_MOD_CHANGESTYLE* = 4
  QsciScintillaBaseSC_MOD_CHANGEFOLD* = 8
  QsciScintillaBaseSC_PERFORMED_USER* = 16
  QsciScintillaBaseSC_PERFORMED_UNDO* = 32
  QsciScintillaBaseSC_PERFORMED_REDO* = 64
  QsciScintillaBaseSC_MULTISTEPUNDOREDO* = 128
  QsciScintillaBaseSC_LASTSTEPINUNDOREDO* = 256
  QsciScintillaBaseSC_MOD_CHANGEMARKER* = 512
  QsciScintillaBaseSC_MOD_BEFOREINSERT* = 1024
  QsciScintillaBaseSC_MOD_BEFOREDELETE* = 2048
  QsciScintillaBaseSC_MULTILINEUNDOREDO* = 4096
  QsciScintillaBaseSC_STARTACTION* = 8192
  QsciScintillaBaseSC_MOD_CHANGEINDICATOR* = 16384
  QsciScintillaBaseSC_MOD_CHANGELINESTATE* = 32768
  QsciScintillaBaseSC_MOD_CHANGEMARGIN* = 65536
  QsciScintillaBaseSC_MOD_CHANGEANNOTATION* = 131072
  QsciScintillaBaseSC_MOD_CONTAINER* = 262144
  QsciScintillaBaseSC_MOD_LEXERSTATE* = 524288
  QsciScintillaBaseSC_MOD_INSERTCHECK* = 1048576
  QsciScintillaBaseSC_MOD_CHANGETABSTOPS* = 2097152
  QsciScintillaBaseSC_MODEVENTMASKALL* = 4194303
  QsciScintillaBaseSCK_DOWN* = 300
  QsciScintillaBaseSCK_UP* = 301
  QsciScintillaBaseSCK_LEFT* = 302
  QsciScintillaBaseSCK_RIGHT* = 303
  QsciScintillaBaseSCK_HOME* = 304
  QsciScintillaBaseSCK_END* = 305
  QsciScintillaBaseSCK_PRIOR* = 306
  QsciScintillaBaseSCK_NEXT* = 307
  QsciScintillaBaseSCK_DELETE* = 308
  QsciScintillaBaseSCK_INSERT* = 309
  QsciScintillaBaseSCK_ESCAPE* = 7
  QsciScintillaBaseSCK_BACK* = 8
  QsciScintillaBaseSCK_TAB* = 9
  QsciScintillaBaseSCK_RETURN* = 13
  QsciScintillaBaseSCK_ADD* = 310
  QsciScintillaBaseSCK_SUBTRACT* = 311
  QsciScintillaBaseSCK_DIVIDE* = 312
  QsciScintillaBaseSCK_WIN* = 313
  QsciScintillaBaseSCK_RWIN* = 314
  QsciScintillaBaseSCK_MENU* = 315
  QsciScintillaBaseSCMOD_NORM* = 0
  QsciScintillaBaseSCMOD_SHIFT* = 1
  QsciScintillaBaseSCMOD_CTRL* = 2
  QsciScintillaBaseSCMOD_ALT* = 4
  QsciScintillaBaseSCMOD_SUPER* = 8
  QsciScintillaBaseSCMOD_META* = 16
  QsciScintillaBaseSCLEX_CONTAINER* = 0
  QsciScintillaBaseSCLEX_NULL* = 1
  QsciScintillaBaseSCLEX_PYTHON* = 2
  QsciScintillaBaseSCLEX_CPP* = 3
  QsciScintillaBaseSCLEX_HTML* = 4
  QsciScintillaBaseSCLEX_XML* = 5
  QsciScintillaBaseSCLEX_PERL* = 6
  QsciScintillaBaseSCLEX_SQL* = 7
  QsciScintillaBaseSCLEX_VB* = 8
  QsciScintillaBaseSCLEX_PROPERTIES* = 9
  QsciScintillaBaseSCLEX_ERRORLIST* = 10
  QsciScintillaBaseSCLEX_MAKEFILE* = 11
  QsciScintillaBaseSCLEX_BATCH* = 12
  QsciScintillaBaseSCLEX_LATEX* = 14
  QsciScintillaBaseSCLEX_LUA* = 15
  QsciScintillaBaseSCLEX_DIFF* = 16
  QsciScintillaBaseSCLEX_CONF* = 17
  QsciScintillaBaseSCLEX_PASCAL* = 18
  QsciScintillaBaseSCLEX_AVE* = 19
  QsciScintillaBaseSCLEX_ADA* = 20
  QsciScintillaBaseSCLEX_LISP* = 21
  QsciScintillaBaseSCLEX_RUBY* = 22
  QsciScintillaBaseSCLEX_EIFFEL* = 23
  QsciScintillaBaseSCLEX_EIFFELKW* = 24
  QsciScintillaBaseSCLEX_TCL* = 25
  QsciScintillaBaseSCLEX_NNCRONTAB* = 26
  QsciScintillaBaseSCLEX_BULLANT* = 27
  QsciScintillaBaseSCLEX_VBSCRIPT* = 28
  QsciScintillaBaseSCLEX_ASP* = 4
  QsciScintillaBaseSCLEX_PHP* = 4
  QsciScintillaBaseSCLEX_BAAN* = 31
  QsciScintillaBaseSCLEX_MATLAB* = 32
  QsciScintillaBaseSCLEX_SCRIPTOL* = 33
  QsciScintillaBaseSCLEX_ASM* = 34
  QsciScintillaBaseSCLEX_CPPNOCASE* = 35
  QsciScintillaBaseSCLEX_FORTRAN* = 36
  QsciScintillaBaseSCLEX_F77* = 37
  QsciScintillaBaseSCLEX_CSS* = 38
  QsciScintillaBaseSCLEX_POV* = 39
  QsciScintillaBaseSCLEX_LOUT* = 40
  QsciScintillaBaseSCLEX_ESCRIPT* = 41
  QsciScintillaBaseSCLEX_PS* = 42
  QsciScintillaBaseSCLEX_NSIS* = 43
  QsciScintillaBaseSCLEX_MMIXAL* = 44
  QsciScintillaBaseSCLEX_CLW* = 45
  QsciScintillaBaseSCLEX_CLWNOCASE* = 46
  QsciScintillaBaseSCLEX_LOT* = 47
  QsciScintillaBaseSCLEX_YAML* = 48
  QsciScintillaBaseSCLEX_TEX* = 49
  QsciScintillaBaseSCLEX_METAPOST* = 50
  QsciScintillaBaseSCLEX_POWERBASIC* = 51
  QsciScintillaBaseSCLEX_FORTH* = 52
  QsciScintillaBaseSCLEX_ERLANG* = 53
  QsciScintillaBaseSCLEX_OCTAVE* = 54
  QsciScintillaBaseSCLEX_MSSQL* = 55
  QsciScintillaBaseSCLEX_VERILOG* = 56
  QsciScintillaBaseSCLEX_KIX* = 57
  QsciScintillaBaseSCLEX_GUI4CLI* = 58
  QsciScintillaBaseSCLEX_SPECMAN* = 59
  QsciScintillaBaseSCLEX_AU3* = 60
  QsciScintillaBaseSCLEX_APDL* = 61
  QsciScintillaBaseSCLEX_BASH* = 62
  QsciScintillaBaseSCLEX_ASN1* = 63
  QsciScintillaBaseSCLEX_VHDL* = 64
  QsciScintillaBaseSCLEX_CAML* = 65
  QsciScintillaBaseSCLEX_BLITZBASIC* = 66
  QsciScintillaBaseSCLEX_PUREBASIC* = 67
  QsciScintillaBaseSCLEX_HASKELL* = 68
  QsciScintillaBaseSCLEX_PHPSCRIPT* = 69
  QsciScintillaBaseSCLEX_TADS3* = 70
  QsciScintillaBaseSCLEX_REBOL* = 71
  QsciScintillaBaseSCLEX_SMALLTALK* = 72
  QsciScintillaBaseSCLEX_FLAGSHIP* = 73
  QsciScintillaBaseSCLEX_CSOUND* = 74
  QsciScintillaBaseSCLEX_FREEBASIC* = 75
  QsciScintillaBaseSCLEX_INNOSETUP* = 76
  QsciScintillaBaseSCLEX_OPAL* = 77
  QsciScintillaBaseSCLEX_SPICE* = 78
  QsciScintillaBaseSCLEX_D* = 79
  QsciScintillaBaseSCLEX_CMAKE* = 80
  QsciScintillaBaseSCLEX_GAP* = 81
  QsciScintillaBaseSCLEX_PLM* = 82
  QsciScintillaBaseSCLEX_PROGRESS* = 83
  QsciScintillaBaseSCLEX_ABAQUS* = 84
  QsciScintillaBaseSCLEX_ASYMPTOTE* = 85
  QsciScintillaBaseSCLEX_R* = 86
  QsciScintillaBaseSCLEX_MAGIK* = 87
  QsciScintillaBaseSCLEX_POWERSHELL* = 88
  QsciScintillaBaseSCLEX_MYSQL* = 89
  QsciScintillaBaseSCLEX_PO* = 90
  QsciScintillaBaseSCLEX_TAL* = 91
  QsciScintillaBaseSCLEX_COBOL* = 92
  QsciScintillaBaseSCLEX_TACL* = 93
  QsciScintillaBaseSCLEX_SORCUS* = 94
  QsciScintillaBaseSCLEX_POWERPRO* = 95
  QsciScintillaBaseSCLEX_NIMROD* = 96
  QsciScintillaBaseSCLEX_SML* = 97
  QsciScintillaBaseSCLEX_MARKDOWN* = 98
  QsciScintillaBaseSCLEX_TXT2TAGS* = 99
  QsciScintillaBaseSCLEX_A68K* = 100
  QsciScintillaBaseSCLEX_MODULA* = 101
  QsciScintillaBaseSCLEX_COFFEESCRIPT* = 102
  QsciScintillaBaseSCLEX_TCMD* = 103
  QsciScintillaBaseSCLEX_AVS* = 104
  QsciScintillaBaseSCLEX_ECL* = 105
  QsciScintillaBaseSCLEX_OSCRIPT* = 106
  QsciScintillaBaseSCLEX_VISUALPROLOG* = 107
  QsciScintillaBaseSCLEX_LITERATEHASKELL* = 108
  QsciScintillaBaseSCLEX_STTXT* = 109
  QsciScintillaBaseSCLEX_KVIRC* = 110
  QsciScintillaBaseSCLEX_RUST* = 111
  QsciScintillaBaseSCLEX_DMAP* = 112
  QsciScintillaBaseSCLEX_AS* = 113
  QsciScintillaBaseSCLEX_DMIS* = 114
  QsciScintillaBaseSCLEX_REGISTRY* = 115
  QsciScintillaBaseSCLEX_BIBTEX* = 116
  QsciScintillaBaseSCLEX_SREC* = 117
  QsciScintillaBaseSCLEX_IHEX* = 118
  QsciScintillaBaseSCLEX_TEHEX* = 119
  QsciScintillaBaseSCLEX_JSON* = 120
  QsciScintillaBaseSCLEX_EDIFACT* = 121
  QsciScintillaBaseSCLEX_INDENT* = 122
  QsciScintillaBaseSCLEX_MAXIMA* = 123
  QsciScintillaBaseSCLEX_STATA* = 124
  QsciScintillaBaseSCLEX_SAS* = 125
  QsciScintillaBaseSC_WEIGHT_NORMAL* = 400
  QsciScintillaBaseSC_WEIGHT_SEMIBOLD* = 600
  QsciScintillaBaseSC_WEIGHT_BOLD* = 700
  QsciScintillaBaseSC_TECHNOLOGY_DEFAULT* = 0
  QsciScintillaBaseSC_TECHNOLOGY_DIRECTWRITE* = 1
  QsciScintillaBaseSC_TECHNOLOGY_DIRECTWRITERETAIN* = 2
  QsciScintillaBaseSC_TECHNOLOGY_DIRECTWRITEDC* = 3
  QsciScintillaBaseSC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE* = 0
  QsciScintillaBaseSC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE* = 1
  QsciScintillaBaseSC_FONT_SIZE_MULTIPLIER* = 100
  QsciScintillaBaseSC_FOLDACTION_CONTRACT* = 0
  QsciScintillaBaseSC_FOLDACTION_EXPAND* = 1
  QsciScintillaBaseSC_FOLDACTION_TOGGLE* = 2
  QsciScintillaBaseSC_AUTOMATICFOLD_SHOW* = 1
  QsciScintillaBaseSC_AUTOMATICFOLD_CLICK* = 2
  QsciScintillaBaseSC_AUTOMATICFOLD_CHANGE* = 4
  QsciScintillaBaseSC_ORDER_PRESORTED* = 0
  QsciScintillaBaseSC_ORDER_PERFORMSORT* = 1
  QsciScintillaBaseSC_ORDER_CUSTOM* = 2



import gen_qsciscintillabase_types
export gen_qsciscintillabase_types

import
  gen_qabstractscrollarea,
  gen_qcolor,
  gen_qcoreevent,
  gen_qevent,
  gen_qimage,
  gen_qmetaobject,
  gen_qmimedata,
  gen_qnamespace,
  gen_qobject,
  gen_qobjectdefs,
  gen_qpaintdevice,
  gen_qpaintengine,
  gen_qpainter,
  gen_qpixmap,
  gen_qpoint,
  gen_qrect,
  gen_qscrollbar,
  gen_qsize,
  gen_qstyleoption,
  gen_qurl,
  gen_qvariant,
  gen_qwidget
export
  gen_qabstractscrollarea,
  gen_qcolor,
  gen_qcoreevent,
  gen_qevent,
  gen_qimage,
  gen_qmetaobject,
  gen_qmimedata,
  gen_qnamespace,
  gen_qobject,
  gen_qobjectdefs,
  gen_qpaintdevice,
  gen_qpaintengine,
  gen_qpainter,
  gen_qpixmap,
  gen_qpoint,
  gen_qrect,
  gen_qscrollbar,
  gen_qsize,
  gen_qstyleoption,
  gen_qurl,
  gen_qvariant,
  gen_qwidget

type cQsciScintillaBase*{.exportc: "QsciScintillaBase", incompleteStruct.} = object

proc fcQsciScintillaBase_new(parent: pointer): ptr cQsciScintillaBase {.importc: "QsciScintillaBase_new".}
proc fcQsciScintillaBase_new2(): ptr cQsciScintillaBase {.importc: "QsciScintillaBase_new2".}
proc fcQsciScintillaBase_metaObject(self: pointer, ): pointer {.importc: "QsciScintillaBase_metaObject".}
proc fcQsciScintillaBase_metacast(self: pointer, param1: cstring): pointer {.importc: "QsciScintillaBase_metacast".}
proc fcQsciScintillaBase_metacall(self: pointer, param1: cint, param2: cint, param3: pointer): cint {.importc: "QsciScintillaBase_metacall".}
proc fcQsciScintillaBase_tr(s: cstring): struct_miqt_string {.importc: "QsciScintillaBase_tr".}
proc fcQsciScintillaBase_pool(): pointer {.importc: "QsciScintillaBase_pool".}
proc fcQsciScintillaBase_replaceHorizontalScrollBar(self: pointer, scrollBar: pointer): void {.importc: "QsciScintillaBase_replaceHorizontalScrollBar".}
proc fcQsciScintillaBase_replaceVerticalScrollBar(self: pointer, scrollBar: pointer): void {.importc: "QsciScintillaBase_replaceVerticalScrollBar".}
proc fcQsciScintillaBase_SendScintilla(self: pointer, msg: cuint): clong {.importc: "QsciScintillaBase_SendScintilla".}
proc fcQsciScintillaBase_SendScintilla2(self: pointer, msg: cuint, wParam: culong, lParam: pointer): clong {.importc: "QsciScintillaBase_SendScintilla2".}
proc fcQsciScintillaBase_SendScintilla3(self: pointer, msg: cuint, wParam: miqt_uintptr_t, lParam: cstring): clong {.importc: "QsciScintillaBase_SendScintilla3".}
proc fcQsciScintillaBase_SendScintilla4(self: pointer, msg: cuint, lParam: cstring): clong {.importc: "QsciScintillaBase_SendScintilla4".}
proc fcQsciScintillaBase_SendScintilla5(self: pointer, msg: cuint, wParam: cstring, lParam: cstring): clong {.importc: "QsciScintillaBase_SendScintilla5".}
proc fcQsciScintillaBase_SendScintilla6(self: pointer, msg: cuint, wParam: clong): clong {.importc: "QsciScintillaBase_SendScintilla6".}
proc fcQsciScintillaBase_SendScintilla7(self: pointer, msg: cuint, wParam: cint): clong {.importc: "QsciScintillaBase_SendScintilla7".}
proc fcQsciScintillaBase_SendScintilla8(self: pointer, msg: cuint, cpMin: clong, cpMax: clong, lpstrText: cstring): clong {.importc: "QsciScintillaBase_SendScintilla8".}
proc fcQsciScintillaBase_SendScintilla9(self: pointer, msg: cuint, wParam: culong, col: pointer): clong {.importc: "QsciScintillaBase_SendScintilla9".}
proc fcQsciScintillaBase_SendScintilla10(self: pointer, msg: cuint, col: pointer): clong {.importc: "QsciScintillaBase_SendScintilla10".}
proc fcQsciScintillaBase_SendScintilla11(self: pointer, msg: cuint, wParam: culong, hdc: pointer, rc: pointer, cpMin: clong, cpMax: clong): clong {.importc: "QsciScintillaBase_SendScintilla11".}
proc fcQsciScintillaBase_SendScintilla12(self: pointer, msg: cuint, wParam: culong, lParam: pointer): clong {.importc: "QsciScintillaBase_SendScintilla12".}
proc fcQsciScintillaBase_SendScintilla13(self: pointer, msg: cuint, wParam: culong, lParam: pointer): clong {.importc: "QsciScintillaBase_SendScintilla13".}
proc fcQsciScintillaBase_SendScintillaPtrResult(self: pointer, msg: cuint): pointer {.importc: "QsciScintillaBase_SendScintillaPtrResult".}
proc fcQsciScintillaBase_commandKey(qt_key: cint, modifiers: ptr cint): cint {.importc: "QsciScintillaBase_commandKey".}
proc fcQsciScintillaBase_QSCN_SELCHANGED(self: pointer, yes: bool): void {.importc: "QsciScintillaBase_QSCN_SELCHANGED".}
proc fQsciScintillaBase_connect_QSCN_SELCHANGED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_QSCN_SELCHANGED".}
proc fcQsciScintillaBase_SCN_AUTOCCANCELLED(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_AUTOCCANCELLED".}
proc fQsciScintillaBase_connect_SCN_AUTOCCANCELLED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCCANCELLED".}
proc fcQsciScintillaBase_SCN_AUTOCCHARDELETED(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_AUTOCCHARDELETED".}
proc fQsciScintillaBase_connect_SCN_AUTOCCHARDELETED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCCHARDELETED".}
proc fcQsciScintillaBase_SCN_AUTOCCOMPLETED(self: pointer, selection: cstring, position: cint, ch: cint, methodVal: cint): void {.importc: "QsciScintillaBase_SCN_AUTOCCOMPLETED".}
proc fQsciScintillaBase_connect_SCN_AUTOCCOMPLETED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCCOMPLETED".}
proc fcQsciScintillaBase_SCN_AUTOCSELECTION(self: pointer, selection: cstring, position: cint, ch: cint, methodVal: cint): void {.importc: "QsciScintillaBase_SCN_AUTOCSELECTION".}
proc fQsciScintillaBase_connect_SCN_AUTOCSELECTION(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCSELECTION".}
proc fcQsciScintillaBase_SCN_AUTOCSELECTION2(self: pointer, selection: cstring, position: cint): void {.importc: "QsciScintillaBase_SCN_AUTOCSELECTION2".}
proc fQsciScintillaBase_connect_SCN_AUTOCSELECTION2(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCSELECTION2".}
proc fcQsciScintillaBase_SCN_AUTOCSELECTIONCHANGE(self: pointer, selection: cstring, id: cint, position: cint): void {.importc: "QsciScintillaBase_SCN_AUTOCSELECTIONCHANGE".}
proc fQsciScintillaBase_connect_SCN_AUTOCSELECTIONCHANGE(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_AUTOCSELECTIONCHANGE".}
proc fcQsciScintillaBase_SCEN_CHANGE(self: pointer, ): void {.importc: "QsciScintillaBase_SCEN_CHANGE".}
proc fQsciScintillaBase_connect_SCEN_CHANGE(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCEN_CHANGE".}
proc fcQsciScintillaBase_SCN_CALLTIPCLICK(self: pointer, direction: cint): void {.importc: "QsciScintillaBase_SCN_CALLTIPCLICK".}
proc fQsciScintillaBase_connect_SCN_CALLTIPCLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_CALLTIPCLICK".}
proc fcQsciScintillaBase_SCN_CHARADDED(self: pointer, charadded: cint): void {.importc: "QsciScintillaBase_SCN_CHARADDED".}
proc fQsciScintillaBase_connect_SCN_CHARADDED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_CHARADDED".}
proc fcQsciScintillaBase_SCN_DOUBLECLICK(self: pointer, position: cint, line: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_DOUBLECLICK".}
proc fQsciScintillaBase_connect_SCN_DOUBLECLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_DOUBLECLICK".}
proc fcQsciScintillaBase_SCN_DWELLEND(self: pointer, position: cint, x: cint, y: cint): void {.importc: "QsciScintillaBase_SCN_DWELLEND".}
proc fQsciScintillaBase_connect_SCN_DWELLEND(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_DWELLEND".}
proc fcQsciScintillaBase_SCN_DWELLSTART(self: pointer, position: cint, x: cint, y: cint): void {.importc: "QsciScintillaBase_SCN_DWELLSTART".}
proc fQsciScintillaBase_connect_SCN_DWELLSTART(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_DWELLSTART".}
proc fcQsciScintillaBase_SCN_FOCUSIN(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_FOCUSIN".}
proc fQsciScintillaBase_connect_SCN_FOCUSIN(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_FOCUSIN".}
proc fcQsciScintillaBase_SCN_FOCUSOUT(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_FOCUSOUT".}
proc fQsciScintillaBase_connect_SCN_FOCUSOUT(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_FOCUSOUT".}
proc fcQsciScintillaBase_SCN_HOTSPOTCLICK(self: pointer, position: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_HOTSPOTCLICK".}
proc fQsciScintillaBase_connect_SCN_HOTSPOTCLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_HOTSPOTCLICK".}
proc fcQsciScintillaBase_SCN_HOTSPOTDOUBLECLICK(self: pointer, position: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_HOTSPOTDOUBLECLICK".}
proc fQsciScintillaBase_connect_SCN_HOTSPOTDOUBLECLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_HOTSPOTDOUBLECLICK".}
proc fcQsciScintillaBase_SCN_HOTSPOTRELEASECLICK(self: pointer, position: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_HOTSPOTRELEASECLICK".}
proc fQsciScintillaBase_connect_SCN_HOTSPOTRELEASECLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_HOTSPOTRELEASECLICK".}
proc fcQsciScintillaBase_SCN_INDICATORCLICK(self: pointer, position: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_INDICATORCLICK".}
proc fQsciScintillaBase_connect_SCN_INDICATORCLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_INDICATORCLICK".}
proc fcQsciScintillaBase_SCN_INDICATORRELEASE(self: pointer, position: cint, modifiers: cint): void {.importc: "QsciScintillaBase_SCN_INDICATORRELEASE".}
proc fQsciScintillaBase_connect_SCN_INDICATORRELEASE(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_INDICATORRELEASE".}
proc fcQsciScintillaBase_SCN_MACRORECORD(self: pointer, param1: cuint, param2: culong, param3: pointer): void {.importc: "QsciScintillaBase_SCN_MACRORECORD".}
proc fQsciScintillaBase_connect_SCN_MACRORECORD(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_MACRORECORD".}
proc fcQsciScintillaBase_SCN_MARGINCLICK(self: pointer, position: cint, modifiers: cint, margin: cint): void {.importc: "QsciScintillaBase_SCN_MARGINCLICK".}
proc fQsciScintillaBase_connect_SCN_MARGINCLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_MARGINCLICK".}
proc fcQsciScintillaBase_SCN_MARGINRIGHTCLICK(self: pointer, position: cint, modifiers: cint, margin: cint): void {.importc: "QsciScintillaBase_SCN_MARGINRIGHTCLICK".}
proc fQsciScintillaBase_connect_SCN_MARGINRIGHTCLICK(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_MARGINRIGHTCLICK".}
proc fcQsciScintillaBase_SCN_MODIFIED(self: pointer, param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint): void {.importc: "QsciScintillaBase_SCN_MODIFIED".}
proc fQsciScintillaBase_connect_SCN_MODIFIED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_MODIFIED".}
proc fcQsciScintillaBase_SCN_MODIFYATTEMPTRO(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_MODIFYATTEMPTRO".}
proc fQsciScintillaBase_connect_SCN_MODIFYATTEMPTRO(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_MODIFYATTEMPTRO".}
proc fcQsciScintillaBase_SCN_NEEDSHOWN(self: pointer, param1: cint, param2: cint): void {.importc: "QsciScintillaBase_SCN_NEEDSHOWN".}
proc fQsciScintillaBase_connect_SCN_NEEDSHOWN(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_NEEDSHOWN".}
proc fcQsciScintillaBase_SCN_PAINTED(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_PAINTED".}
proc fQsciScintillaBase_connect_SCN_PAINTED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_PAINTED".}
proc fcQsciScintillaBase_SCN_SAVEPOINTLEFT(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_SAVEPOINTLEFT".}
proc fQsciScintillaBase_connect_SCN_SAVEPOINTLEFT(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_SAVEPOINTLEFT".}
proc fcQsciScintillaBase_SCN_SAVEPOINTREACHED(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_SAVEPOINTREACHED".}
proc fQsciScintillaBase_connect_SCN_SAVEPOINTREACHED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_SAVEPOINTREACHED".}
proc fcQsciScintillaBase_SCN_STYLENEEDED(self: pointer, position: cint): void {.importc: "QsciScintillaBase_SCN_STYLENEEDED".}
proc fQsciScintillaBase_connect_SCN_STYLENEEDED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_STYLENEEDED".}
proc fcQsciScintillaBase_SCN_URIDROPPED(self: pointer, url: pointer): void {.importc: "QsciScintillaBase_SCN_URIDROPPED".}
proc fQsciScintillaBase_connect_SCN_URIDROPPED(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_URIDROPPED".}
proc fcQsciScintillaBase_SCN_UPDATEUI(self: pointer, updated: cint): void {.importc: "QsciScintillaBase_SCN_UPDATEUI".}
proc fQsciScintillaBase_connect_SCN_UPDATEUI(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_UPDATEUI".}
proc fcQsciScintillaBase_SCN_USERLISTSELECTION(self: pointer, selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint): void {.importc: "QsciScintillaBase_SCN_USERLISTSELECTION".}
proc fQsciScintillaBase_connect_SCN_USERLISTSELECTION(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_USERLISTSELECTION".}
proc fcQsciScintillaBase_SCN_USERLISTSELECTION2(self: pointer, selection: cstring, id: cint, ch: cint, methodVal: cint): void {.importc: "QsciScintillaBase_SCN_USERLISTSELECTION2".}
proc fQsciScintillaBase_connect_SCN_USERLISTSELECTION2(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_USERLISTSELECTION2".}
proc fcQsciScintillaBase_SCN_USERLISTSELECTION3(self: pointer, selection: cstring, id: cint): void {.importc: "QsciScintillaBase_SCN_USERLISTSELECTION3".}
proc fQsciScintillaBase_connect_SCN_USERLISTSELECTION3(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_USERLISTSELECTION3".}
proc fcQsciScintillaBase_SCN_ZOOM(self: pointer, ): void {.importc: "QsciScintillaBase_SCN_ZOOM".}
proc fQsciScintillaBase_connect_SCN_ZOOM(self: pointer, slot: int) {.importc: "QsciScintillaBase_connect_SCN_ZOOM".}
proc fcQsciScintillaBase_tr2(s: cstring, c: cstring): struct_miqt_string {.importc: "QsciScintillaBase_tr2".}
proc fcQsciScintillaBase_tr3(s: cstring, c: cstring, n: cint): struct_miqt_string {.importc: "QsciScintillaBase_tr3".}
proc fcQsciScintillaBase_SendScintilla22(self: pointer, msg: cuint, wParam: culong): clong {.importc: "QsciScintillaBase_SendScintilla22".}
proc fcQsciScintillaBase_SendScintilla32(self: pointer, msg: cuint, wParam: culong, lParam: clong): clong {.importc: "QsciScintillaBase_SendScintilla32".}
proc fQsciScintillaBase_virtualbase_metacall(self: pointer, param1: cint, param2: cint, param3: pointer): cint{.importc: "QsciScintillaBase_virtualbase_metacall".}
proc fcQsciScintillaBase_override_virtual_metacall(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_metacall".}
proc fQsciScintillaBase_virtualbase_canInsertFromMimeData(self: pointer, source: pointer): bool{.importc: "QsciScintillaBase_virtualbase_canInsertFromMimeData".}
proc fcQsciScintillaBase_override_virtual_canInsertFromMimeData(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_canInsertFromMimeData".}
proc fQsciScintillaBase_virtualbase_fromMimeData(self: pointer, source: pointer, rectangular: ptr bool): struct_miqt_string{.importc: "QsciScintillaBase_virtualbase_fromMimeData".}
proc fcQsciScintillaBase_override_virtual_fromMimeData(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_fromMimeData".}
proc fQsciScintillaBase_virtualbase_toMimeData(self: pointer, text: struct_miqt_string, rectangular: bool): pointer{.importc: "QsciScintillaBase_virtualbase_toMimeData".}
proc fcQsciScintillaBase_override_virtual_toMimeData(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_toMimeData".}
proc fQsciScintillaBase_virtualbase_changeEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_changeEvent".}
proc fcQsciScintillaBase_override_virtual_changeEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_changeEvent".}
proc fQsciScintillaBase_virtualbase_contextMenuEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_contextMenuEvent".}
proc fcQsciScintillaBase_override_virtual_contextMenuEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_contextMenuEvent".}
proc fQsciScintillaBase_virtualbase_dragEnterEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_dragEnterEvent".}
proc fcQsciScintillaBase_override_virtual_dragEnterEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_dragEnterEvent".}
proc fQsciScintillaBase_virtualbase_dragLeaveEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_dragLeaveEvent".}
proc fcQsciScintillaBase_override_virtual_dragLeaveEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_dragLeaveEvent".}
proc fQsciScintillaBase_virtualbase_dragMoveEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_dragMoveEvent".}
proc fcQsciScintillaBase_override_virtual_dragMoveEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_dragMoveEvent".}
proc fQsciScintillaBase_virtualbase_dropEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_dropEvent".}
proc fcQsciScintillaBase_override_virtual_dropEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_dropEvent".}
proc fQsciScintillaBase_virtualbase_focusInEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_focusInEvent".}
proc fcQsciScintillaBase_override_virtual_focusInEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_focusInEvent".}
proc fQsciScintillaBase_virtualbase_focusOutEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_focusOutEvent".}
proc fcQsciScintillaBase_override_virtual_focusOutEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_focusOutEvent".}
proc fQsciScintillaBase_virtualbase_focusNextPrevChild(self: pointer, next: bool): bool{.importc: "QsciScintillaBase_virtualbase_focusNextPrevChild".}
proc fcQsciScintillaBase_override_virtual_focusNextPrevChild(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_focusNextPrevChild".}
proc fQsciScintillaBase_virtualbase_keyPressEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_keyPressEvent".}
proc fcQsciScintillaBase_override_virtual_keyPressEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_keyPressEvent".}
proc fQsciScintillaBase_virtualbase_inputMethodEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_inputMethodEvent".}
proc fcQsciScintillaBase_override_virtual_inputMethodEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_inputMethodEvent".}
proc fQsciScintillaBase_virtualbase_inputMethodQuery(self: pointer, query: cint): pointer{.importc: "QsciScintillaBase_virtualbase_inputMethodQuery".}
proc fcQsciScintillaBase_override_virtual_inputMethodQuery(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_inputMethodQuery".}
proc fQsciScintillaBase_virtualbase_mouseDoubleClickEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_mouseDoubleClickEvent".}
proc fcQsciScintillaBase_override_virtual_mouseDoubleClickEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_mouseDoubleClickEvent".}
proc fQsciScintillaBase_virtualbase_mouseMoveEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_mouseMoveEvent".}
proc fcQsciScintillaBase_override_virtual_mouseMoveEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_mouseMoveEvent".}
proc fQsciScintillaBase_virtualbase_mousePressEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_mousePressEvent".}
proc fcQsciScintillaBase_override_virtual_mousePressEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_mousePressEvent".}
proc fQsciScintillaBase_virtualbase_mouseReleaseEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_mouseReleaseEvent".}
proc fcQsciScintillaBase_override_virtual_mouseReleaseEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_mouseReleaseEvent".}
proc fQsciScintillaBase_virtualbase_paintEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_paintEvent".}
proc fcQsciScintillaBase_override_virtual_paintEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_paintEvent".}
proc fQsciScintillaBase_virtualbase_resizeEvent(self: pointer, e: pointer): void{.importc: "QsciScintillaBase_virtualbase_resizeEvent".}
proc fcQsciScintillaBase_override_virtual_resizeEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_resizeEvent".}
proc fQsciScintillaBase_virtualbase_scrollContentsBy(self: pointer, dx: cint, dy: cint): void{.importc: "QsciScintillaBase_virtualbase_scrollContentsBy".}
proc fcQsciScintillaBase_override_virtual_scrollContentsBy(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_scrollContentsBy".}
proc fQsciScintillaBase_virtualbase_minimumSizeHint(self: pointer, ): pointer{.importc: "QsciScintillaBase_virtualbase_minimumSizeHint".}
proc fcQsciScintillaBase_override_virtual_minimumSizeHint(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_minimumSizeHint".}
proc fQsciScintillaBase_virtualbase_sizeHint(self: pointer, ): pointer{.importc: "QsciScintillaBase_virtualbase_sizeHint".}
proc fcQsciScintillaBase_override_virtual_sizeHint(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_sizeHint".}
proc fQsciScintillaBase_virtualbase_setupViewport(self: pointer, viewport: pointer): void{.importc: "QsciScintillaBase_virtualbase_setupViewport".}
proc fcQsciScintillaBase_override_virtual_setupViewport(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_setupViewport".}
proc fQsciScintillaBase_virtualbase_eventFilter(self: pointer, param1: pointer, param2: pointer): bool{.importc: "QsciScintillaBase_virtualbase_eventFilter".}
proc fcQsciScintillaBase_override_virtual_eventFilter(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_eventFilter".}
proc fQsciScintillaBase_virtualbase_event(self: pointer, param1: pointer): bool{.importc: "QsciScintillaBase_virtualbase_event".}
proc fcQsciScintillaBase_override_virtual_event(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_event".}
proc fQsciScintillaBase_virtualbase_viewportEvent(self: pointer, param1: pointer): bool{.importc: "QsciScintillaBase_virtualbase_viewportEvent".}
proc fcQsciScintillaBase_override_virtual_viewportEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_viewportEvent".}
proc fQsciScintillaBase_virtualbase_wheelEvent(self: pointer, param1: pointer): void{.importc: "QsciScintillaBase_virtualbase_wheelEvent".}
proc fcQsciScintillaBase_override_virtual_wheelEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_wheelEvent".}
proc fQsciScintillaBase_virtualbase_viewportSizeHint(self: pointer, ): pointer{.importc: "QsciScintillaBase_virtualbase_viewportSizeHint".}
proc fcQsciScintillaBase_override_virtual_viewportSizeHint(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_viewportSizeHint".}
proc fQsciScintillaBase_virtualbase_initStyleOption(self: pointer, option: pointer): void{.importc: "QsciScintillaBase_virtualbase_initStyleOption".}
proc fcQsciScintillaBase_override_virtual_initStyleOption(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_initStyleOption".}
proc fQsciScintillaBase_virtualbase_devType(self: pointer, ): cint{.importc: "QsciScintillaBase_virtualbase_devType".}
proc fcQsciScintillaBase_override_virtual_devType(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_devType".}
proc fQsciScintillaBase_virtualbase_setVisible(self: pointer, visible: bool): void{.importc: "QsciScintillaBase_virtualbase_setVisible".}
proc fcQsciScintillaBase_override_virtual_setVisible(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_setVisible".}
proc fQsciScintillaBase_virtualbase_heightForWidth(self: pointer, param1: cint): cint{.importc: "QsciScintillaBase_virtualbase_heightForWidth".}
proc fcQsciScintillaBase_override_virtual_heightForWidth(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_heightForWidth".}
proc fQsciScintillaBase_virtualbase_hasHeightForWidth(self: pointer, ): bool{.importc: "QsciScintillaBase_virtualbase_hasHeightForWidth".}
proc fcQsciScintillaBase_override_virtual_hasHeightForWidth(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_hasHeightForWidth".}
proc fQsciScintillaBase_virtualbase_paintEngine(self: pointer, ): pointer{.importc: "QsciScintillaBase_virtualbase_paintEngine".}
proc fcQsciScintillaBase_override_virtual_paintEngine(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_paintEngine".}
proc fQsciScintillaBase_virtualbase_keyReleaseEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_keyReleaseEvent".}
proc fcQsciScintillaBase_override_virtual_keyReleaseEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_keyReleaseEvent".}
proc fQsciScintillaBase_virtualbase_enterEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_enterEvent".}
proc fcQsciScintillaBase_override_virtual_enterEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_enterEvent".}
proc fQsciScintillaBase_virtualbase_leaveEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_leaveEvent".}
proc fcQsciScintillaBase_override_virtual_leaveEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_leaveEvent".}
proc fQsciScintillaBase_virtualbase_moveEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_moveEvent".}
proc fcQsciScintillaBase_override_virtual_moveEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_moveEvent".}
proc fQsciScintillaBase_virtualbase_closeEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_closeEvent".}
proc fcQsciScintillaBase_override_virtual_closeEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_closeEvent".}
proc fQsciScintillaBase_virtualbase_tabletEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_tabletEvent".}
proc fcQsciScintillaBase_override_virtual_tabletEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_tabletEvent".}
proc fQsciScintillaBase_virtualbase_actionEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_actionEvent".}
proc fcQsciScintillaBase_override_virtual_actionEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_actionEvent".}
proc fQsciScintillaBase_virtualbase_showEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_showEvent".}
proc fcQsciScintillaBase_override_virtual_showEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_showEvent".}
proc fQsciScintillaBase_virtualbase_hideEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_hideEvent".}
proc fcQsciScintillaBase_override_virtual_hideEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_hideEvent".}
proc fQsciScintillaBase_virtualbase_nativeEvent(self: pointer, eventType: struct_miqt_string, message: pointer, resultVal: ptr uint): bool{.importc: "QsciScintillaBase_virtualbase_nativeEvent".}
proc fcQsciScintillaBase_override_virtual_nativeEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_nativeEvent".}
proc fQsciScintillaBase_virtualbase_metric(self: pointer, param1: cint): cint{.importc: "QsciScintillaBase_virtualbase_metric".}
proc fcQsciScintillaBase_override_virtual_metric(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_metric".}
proc fQsciScintillaBase_virtualbase_initPainter(self: pointer, painter: pointer): void{.importc: "QsciScintillaBase_virtualbase_initPainter".}
proc fcQsciScintillaBase_override_virtual_initPainter(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_initPainter".}
proc fQsciScintillaBase_virtualbase_redirected(self: pointer, offset: pointer): pointer{.importc: "QsciScintillaBase_virtualbase_redirected".}
proc fcQsciScintillaBase_override_virtual_redirected(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_redirected".}
proc fQsciScintillaBase_virtualbase_sharedPainter(self: pointer, ): pointer{.importc: "QsciScintillaBase_virtualbase_sharedPainter".}
proc fcQsciScintillaBase_override_virtual_sharedPainter(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_sharedPainter".}
proc fQsciScintillaBase_virtualbase_timerEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_timerEvent".}
proc fcQsciScintillaBase_override_virtual_timerEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_timerEvent".}
proc fQsciScintillaBase_virtualbase_childEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_childEvent".}
proc fcQsciScintillaBase_override_virtual_childEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_childEvent".}
proc fQsciScintillaBase_virtualbase_customEvent(self: pointer, event: pointer): void{.importc: "QsciScintillaBase_virtualbase_customEvent".}
proc fcQsciScintillaBase_override_virtual_customEvent(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_customEvent".}
proc fQsciScintillaBase_virtualbase_connectNotify(self: pointer, signal: pointer): void{.importc: "QsciScintillaBase_virtualbase_connectNotify".}
proc fcQsciScintillaBase_override_virtual_connectNotify(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_connectNotify".}
proc fQsciScintillaBase_virtualbase_disconnectNotify(self: pointer, signal: pointer): void{.importc: "QsciScintillaBase_virtualbase_disconnectNotify".}
proc fcQsciScintillaBase_override_virtual_disconnectNotify(self: pointer, slot: int) {.importc: "QsciScintillaBase_override_virtual_disconnectNotify".}
proc fcQsciScintillaBase_delete(self: pointer) {.importc: "QsciScintillaBase_delete".}


func init*(T: type QsciScintillaBase, h: ptr cQsciScintillaBase): QsciScintillaBase =
  T(h: h)
proc create*(T: type QsciScintillaBase, parent: gen_qwidget.QWidget): QsciScintillaBase =

  QsciScintillaBase.init(fcQsciScintillaBase_new(parent.h))
proc create*(T: type QsciScintillaBase, ): QsciScintillaBase =

  QsciScintillaBase.init(fcQsciScintillaBase_new2())
proc metaObject*(self: QsciScintillaBase, ): gen_qobjectdefs.QMetaObject =

  gen_qobjectdefs.QMetaObject(h: fcQsciScintillaBase_metaObject(self.h))

proc metacast*(self: QsciScintillaBase, param1: cstring): pointer =

  fcQsciScintillaBase_metacast(self.h, param1)

proc metacall*(self: QsciScintillaBase, param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint =

  fcQsciScintillaBase_metacall(self.h, cint(param1), param2, param3)

proc tr*(_: type QsciScintillaBase, s: cstring): string =

  let v_ms = fcQsciScintillaBase_tr(s)
  let vx_ret = string.fromBytes(toOpenArrayByte(v_ms.data, 0, int(v_ms.len)-1))
  c_free(v_ms.data)
  vx_ret

proc pool*(_: type QsciScintillaBase, ): QsciScintillaBase =

  QsciScintillaBase(h: fcQsciScintillaBase_pool())

proc replaceHorizontalScrollBar*(self: QsciScintillaBase, scrollBar: gen_qscrollbar.QScrollBar): void =

  fcQsciScintillaBase_replaceHorizontalScrollBar(self.h, scrollBar.h)

proc replaceVerticalScrollBar*(self: QsciScintillaBase, scrollBar: gen_qscrollbar.QScrollBar): void =

  fcQsciScintillaBase_replaceVerticalScrollBar(self.h, scrollBar.h)

proc SendScintilla*(self: QsciScintillaBase, msg: cuint): clong =

  fcQsciScintillaBase_SendScintilla(self.h, msg)

proc SendScintilla2*(self: QsciScintillaBase, msg: cuint, wParam: culong, lParam: pointer): clong =

  fcQsciScintillaBase_SendScintilla2(self.h, msg, wParam, lParam)

proc SendScintilla3*(self: QsciScintillaBase, msg: cuint, wParam: miqt_uintptr_t, lParam: cstring): clong =

  fcQsciScintillaBase_SendScintilla3(self.h, msg, wParam, lParam)

proc SendScintilla4*(self: QsciScintillaBase, msg: cuint, lParam: cstring): clong =

  fcQsciScintillaBase_SendScintilla4(self.h, msg, lParam)

proc SendScintilla5*(self: QsciScintillaBase, msg: cuint, wParam: cstring, lParam: cstring): clong =

  fcQsciScintillaBase_SendScintilla5(self.h, msg, wParam, lParam)

proc SendScintilla6*(self: QsciScintillaBase, msg: cuint, wParam: clong): clong =

  fcQsciScintillaBase_SendScintilla6(self.h, msg, wParam)

proc SendScintilla7*(self: QsciScintillaBase, msg: cuint, wParam: cint): clong =

  fcQsciScintillaBase_SendScintilla7(self.h, msg, wParam)

proc SendScintilla8*(self: QsciScintillaBase, msg: cuint, cpMin: clong, cpMax: clong, lpstrText: cstring): clong =

  fcQsciScintillaBase_SendScintilla8(self.h, msg, cpMin, cpMax, lpstrText)

proc SendScintilla9*(self: QsciScintillaBase, msg: cuint, wParam: culong, col: gen_qcolor.QColor): clong =

  fcQsciScintillaBase_SendScintilla9(self.h, msg, wParam, col.h)

proc SendScintilla10*(self: QsciScintillaBase, msg: cuint, col: gen_qcolor.QColor): clong =

  fcQsciScintillaBase_SendScintilla10(self.h, msg, col.h)

proc SendScintilla11*(self: QsciScintillaBase, msg: cuint, wParam: culong, hdc: gen_qpainter.QPainter, rc: gen_qrect.QRect, cpMin: clong, cpMax: clong): clong =

  fcQsciScintillaBase_SendScintilla11(self.h, msg, wParam, hdc.h, rc.h, cpMin, cpMax)

proc SendScintilla12*(self: QsciScintillaBase, msg: cuint, wParam: culong, lParam: gen_qpixmap.QPixmap): clong =

  fcQsciScintillaBase_SendScintilla12(self.h, msg, wParam, lParam.h)

proc SendScintilla13*(self: QsciScintillaBase, msg: cuint, wParam: culong, lParam: gen_qimage.QImage): clong =

  fcQsciScintillaBase_SendScintilla13(self.h, msg, wParam, lParam.h)

proc SendScintillaPtrResult*(self: QsciScintillaBase, msg: cuint): pointer =

  fcQsciScintillaBase_SendScintillaPtrResult(self.h, msg)

proc commandKey*(_: type QsciScintillaBase, qt_key: cint, modifiers: ptr cint): cint =

  fcQsciScintillaBase_commandKey(qt_key, modifiers)

proc QSCN_SELCHANGED*(self: QsciScintillaBase, yes: bool): void =

  fcQsciScintillaBase_QSCN_SELCHANGED(self.h, yes)

proc miqt_exec_callback_QsciScintillaBase_QSCN_SELCHANGED(slot: int, yes: bool) {.exportc.} =
  type Cb = proc(yes: bool)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = yes


  nimfunc[](slotval1)

proc onQSCN_SELCHANGED*(self: QsciScintillaBase, slot: proc(yes: bool)) =
  type Cb = proc(yes: bool)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_QSCN_SELCHANGED(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCCANCELLED*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_AUTOCCANCELLED(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCCANCELLED(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_AUTOCCANCELLED*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCCANCELLED(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCCHARDELETED*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_AUTOCCHARDELETED(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCCHARDELETED(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_AUTOCCHARDELETED*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCCHARDELETED(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCCOMPLETED*(self: QsciScintillaBase, selection: cstring, position: cint, ch: cint, methodVal: cint): void =

  fcQsciScintillaBase_SCN_AUTOCCOMPLETED(self.h, selection, position, ch, methodVal)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCCOMPLETED(slot: int, selection: cstring, position: cint, ch: cint, methodVal: cint) {.exportc.} =
  type Cb = proc(selection: cstring, position: cint, ch: cint, methodVal: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = position

  let slotval3 = ch

  let slotval4 = methodVal


  nimfunc[](slotval1, slotval2, slotval3, slotval4)

proc onSCN_AUTOCCOMPLETED*(self: QsciScintillaBase, slot: proc(selection: cstring, position: cint, ch: cint, methodVal: cint)) =
  type Cb = proc(selection: cstring, position: cint, ch: cint, methodVal: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCCOMPLETED(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCSELECTION*(self: QsciScintillaBase, selection: cstring, position: cint, ch: cint, methodVal: cint): void =

  fcQsciScintillaBase_SCN_AUTOCSELECTION(self.h, selection, position, ch, methodVal)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCSELECTION(slot: int, selection: cstring, position: cint, ch: cint, methodVal: cint) {.exportc.} =
  type Cb = proc(selection: cstring, position: cint, ch: cint, methodVal: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = position

  let slotval3 = ch

  let slotval4 = methodVal


  nimfunc[](slotval1, slotval2, slotval3, slotval4)

proc onSCN_AUTOCSELECTION*(self: QsciScintillaBase, slot: proc(selection: cstring, position: cint, ch: cint, methodVal: cint)) =
  type Cb = proc(selection: cstring, position: cint, ch: cint, methodVal: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCSELECTION(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCSELECTION2*(self: QsciScintillaBase, selection: cstring, position: cint): void =

  fcQsciScintillaBase_SCN_AUTOCSELECTION2(self.h, selection, position)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCSELECTION2(slot: int, selection: cstring, position: cint) {.exportc.} =
  type Cb = proc(selection: cstring, position: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = position


  nimfunc[](slotval1, slotval2)

proc onSCN_AUTOCSELECTION2*(self: QsciScintillaBase, slot: proc(selection: cstring, position: cint)) =
  type Cb = proc(selection: cstring, position: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCSELECTION2(self.h, cast[int](addr tmp[]))
proc SCN_AUTOCSELECTIONCHANGE*(self: QsciScintillaBase, selection: cstring, id: cint, position: cint): void =

  fcQsciScintillaBase_SCN_AUTOCSELECTIONCHANGE(self.h, selection, id, position)

proc miqt_exec_callback_QsciScintillaBase_SCN_AUTOCSELECTIONCHANGE(slot: int, selection: cstring, id: cint, position: cint) {.exportc.} =
  type Cb = proc(selection: cstring, id: cint, position: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = id

  let slotval3 = position


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_AUTOCSELECTIONCHANGE*(self: QsciScintillaBase, slot: proc(selection: cstring, id: cint, position: cint)) =
  type Cb = proc(selection: cstring, id: cint, position: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_AUTOCSELECTIONCHANGE(self.h, cast[int](addr tmp[]))
proc SCEN_CHANGE*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCEN_CHANGE(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCEN_CHANGE(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCEN_CHANGE*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCEN_CHANGE(self.h, cast[int](addr tmp[]))
proc SCN_CALLTIPCLICK*(self: QsciScintillaBase, direction: cint): void =

  fcQsciScintillaBase_SCN_CALLTIPCLICK(self.h, direction)

proc miqt_exec_callback_QsciScintillaBase_SCN_CALLTIPCLICK(slot: int, direction: cint) {.exportc.} =
  type Cb = proc(direction: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = direction


  nimfunc[](slotval1)

proc onSCN_CALLTIPCLICK*(self: QsciScintillaBase, slot: proc(direction: cint)) =
  type Cb = proc(direction: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_CALLTIPCLICK(self.h, cast[int](addr tmp[]))
proc SCN_CHARADDED*(self: QsciScintillaBase, charadded: cint): void =

  fcQsciScintillaBase_SCN_CHARADDED(self.h, charadded)

proc miqt_exec_callback_QsciScintillaBase_SCN_CHARADDED(slot: int, charadded: cint) {.exportc.} =
  type Cb = proc(charadded: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = charadded


  nimfunc[](slotval1)

proc onSCN_CHARADDED*(self: QsciScintillaBase, slot: proc(charadded: cint)) =
  type Cb = proc(charadded: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_CHARADDED(self.h, cast[int](addr tmp[]))
proc SCN_DOUBLECLICK*(self: QsciScintillaBase, position: cint, line: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_DOUBLECLICK(self.h, position, line, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_DOUBLECLICK(slot: int, position: cint, line: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, line: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = line

  let slotval3 = modifiers


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_DOUBLECLICK*(self: QsciScintillaBase, slot: proc(position: cint, line: cint, modifiers: cint)) =
  type Cb = proc(position: cint, line: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_DOUBLECLICK(self.h, cast[int](addr tmp[]))
proc SCN_DWELLEND*(self: QsciScintillaBase, position: cint, x: cint, y: cint): void =

  fcQsciScintillaBase_SCN_DWELLEND(self.h, position, x, y)

proc miqt_exec_callback_QsciScintillaBase_SCN_DWELLEND(slot: int, position: cint, x: cint, y: cint) {.exportc.} =
  type Cb = proc(position: cint, x: cint, y: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = x

  let slotval3 = y


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_DWELLEND*(self: QsciScintillaBase, slot: proc(position: cint, x: cint, y: cint)) =
  type Cb = proc(position: cint, x: cint, y: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_DWELLEND(self.h, cast[int](addr tmp[]))
proc SCN_DWELLSTART*(self: QsciScintillaBase, position: cint, x: cint, y: cint): void =

  fcQsciScintillaBase_SCN_DWELLSTART(self.h, position, x, y)

proc miqt_exec_callback_QsciScintillaBase_SCN_DWELLSTART(slot: int, position: cint, x: cint, y: cint) {.exportc.} =
  type Cb = proc(position: cint, x: cint, y: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = x

  let slotval3 = y


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_DWELLSTART*(self: QsciScintillaBase, slot: proc(position: cint, x: cint, y: cint)) =
  type Cb = proc(position: cint, x: cint, y: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_DWELLSTART(self.h, cast[int](addr tmp[]))
proc SCN_FOCUSIN*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_FOCUSIN(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_FOCUSIN(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_FOCUSIN*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_FOCUSIN(self.h, cast[int](addr tmp[]))
proc SCN_FOCUSOUT*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_FOCUSOUT(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_FOCUSOUT(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_FOCUSOUT*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_FOCUSOUT(self.h, cast[int](addr tmp[]))
proc SCN_HOTSPOTCLICK*(self: QsciScintillaBase, position: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_HOTSPOTCLICK(self.h, position, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_HOTSPOTCLICK(slot: int, position: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers


  nimfunc[](slotval1, slotval2)

proc onSCN_HOTSPOTCLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint)) =
  type Cb = proc(position: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_HOTSPOTCLICK(self.h, cast[int](addr tmp[]))
proc SCN_HOTSPOTDOUBLECLICK*(self: QsciScintillaBase, position: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_HOTSPOTDOUBLECLICK(self.h, position, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_HOTSPOTDOUBLECLICK(slot: int, position: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers


  nimfunc[](slotval1, slotval2)

proc onSCN_HOTSPOTDOUBLECLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint)) =
  type Cb = proc(position: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_HOTSPOTDOUBLECLICK(self.h, cast[int](addr tmp[]))
proc SCN_HOTSPOTRELEASECLICK*(self: QsciScintillaBase, position: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_HOTSPOTRELEASECLICK(self.h, position, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_HOTSPOTRELEASECLICK(slot: int, position: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers


  nimfunc[](slotval1, slotval2)

proc onSCN_HOTSPOTRELEASECLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint)) =
  type Cb = proc(position: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_HOTSPOTRELEASECLICK(self.h, cast[int](addr tmp[]))
proc SCN_INDICATORCLICK*(self: QsciScintillaBase, position: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_INDICATORCLICK(self.h, position, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_INDICATORCLICK(slot: int, position: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers


  nimfunc[](slotval1, slotval2)

proc onSCN_INDICATORCLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint)) =
  type Cb = proc(position: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_INDICATORCLICK(self.h, cast[int](addr tmp[]))
proc SCN_INDICATORRELEASE*(self: QsciScintillaBase, position: cint, modifiers: cint): void =

  fcQsciScintillaBase_SCN_INDICATORRELEASE(self.h, position, modifiers)

proc miqt_exec_callback_QsciScintillaBase_SCN_INDICATORRELEASE(slot: int, position: cint, modifiers: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers


  nimfunc[](slotval1, slotval2)

proc onSCN_INDICATORRELEASE*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint)) =
  type Cb = proc(position: cint, modifiers: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_INDICATORRELEASE(self.h, cast[int](addr tmp[]))
proc SCN_MACRORECORD*(self: QsciScintillaBase, param1: cuint, param2: culong, param3: pointer): void =

  fcQsciScintillaBase_SCN_MACRORECORD(self.h, param1, param2, param3)

proc miqt_exec_callback_QsciScintillaBase_SCN_MACRORECORD(slot: int, param1: cuint, param2: culong, param3: pointer) {.exportc.} =
  type Cb = proc(param1: cuint, param2: culong, param3: pointer)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = param1

  let slotval2 = param2

  let slotval3 = param3


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_MACRORECORD*(self: QsciScintillaBase, slot: proc(param1: cuint, param2: culong, param3: pointer)) =
  type Cb = proc(param1: cuint, param2: culong, param3: pointer)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_MACRORECORD(self.h, cast[int](addr tmp[]))
proc SCN_MARGINCLICK*(self: QsciScintillaBase, position: cint, modifiers: cint, margin: cint): void =

  fcQsciScintillaBase_SCN_MARGINCLICK(self.h, position, modifiers, margin)

proc miqt_exec_callback_QsciScintillaBase_SCN_MARGINCLICK(slot: int, position: cint, modifiers: cint, margin: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint, margin: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers

  let slotval3 = margin


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_MARGINCLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint, margin: cint)) =
  type Cb = proc(position: cint, modifiers: cint, margin: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_MARGINCLICK(self.h, cast[int](addr tmp[]))
proc SCN_MARGINRIGHTCLICK*(self: QsciScintillaBase, position: cint, modifiers: cint, margin: cint): void =

  fcQsciScintillaBase_SCN_MARGINRIGHTCLICK(self.h, position, modifiers, margin)

proc miqt_exec_callback_QsciScintillaBase_SCN_MARGINRIGHTCLICK(slot: int, position: cint, modifiers: cint, margin: cint) {.exportc.} =
  type Cb = proc(position: cint, modifiers: cint, margin: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position

  let slotval2 = modifiers

  let slotval3 = margin


  nimfunc[](slotval1, slotval2, slotval3)

proc onSCN_MARGINRIGHTCLICK*(self: QsciScintillaBase, slot: proc(position: cint, modifiers: cint, margin: cint)) =
  type Cb = proc(position: cint, modifiers: cint, margin: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_MARGINRIGHTCLICK(self.h, cast[int](addr tmp[]))
proc SCN_MODIFIED*(self: QsciScintillaBase, param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint): void =

  fcQsciScintillaBase_SCN_MODIFIED(self.h, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10)

proc miqt_exec_callback_QsciScintillaBase_SCN_MODIFIED(slot: int, param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint) {.exportc.} =
  type Cb = proc(param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = param1

  let slotval2 = param2

  let slotval3 = (param3)

  let slotval4 = param4

  let slotval5 = param5

  let slotval6 = param6

  let slotval7 = param7

  let slotval8 = param8

  let slotval9 = param9

  let slotval10 = param10


  nimfunc[](slotval1, slotval2, slotval3, slotval4, slotval5, slotval6, slotval7, slotval8, slotval9, slotval10)

proc onSCN_MODIFIED*(self: QsciScintillaBase, slot: proc(param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint)) =
  type Cb = proc(param1: cint, param2: cint, param3: cstring, param4: cint, param5: cint, param6: cint, param7: cint, param8: cint, param9: cint, param10: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_MODIFIED(self.h, cast[int](addr tmp[]))
proc SCN_MODIFYATTEMPTRO*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_MODIFYATTEMPTRO(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_MODIFYATTEMPTRO(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_MODIFYATTEMPTRO*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_MODIFYATTEMPTRO(self.h, cast[int](addr tmp[]))
proc SCN_NEEDSHOWN*(self: QsciScintillaBase, param1: cint, param2: cint): void =

  fcQsciScintillaBase_SCN_NEEDSHOWN(self.h, param1, param2)

proc miqt_exec_callback_QsciScintillaBase_SCN_NEEDSHOWN(slot: int, param1: cint, param2: cint) {.exportc.} =
  type Cb = proc(param1: cint, param2: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = param1

  let slotval2 = param2


  nimfunc[](slotval1, slotval2)

proc onSCN_NEEDSHOWN*(self: QsciScintillaBase, slot: proc(param1: cint, param2: cint)) =
  type Cb = proc(param1: cint, param2: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_NEEDSHOWN(self.h, cast[int](addr tmp[]))
proc SCN_PAINTED*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_PAINTED(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_PAINTED(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_PAINTED*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_PAINTED(self.h, cast[int](addr tmp[]))
proc SCN_SAVEPOINTLEFT*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_SAVEPOINTLEFT(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_SAVEPOINTLEFT(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_SAVEPOINTLEFT*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_SAVEPOINTLEFT(self.h, cast[int](addr tmp[]))
proc SCN_SAVEPOINTREACHED*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_SAVEPOINTREACHED(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_SAVEPOINTREACHED(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_SAVEPOINTREACHED*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_SAVEPOINTREACHED(self.h, cast[int](addr tmp[]))
proc SCN_STYLENEEDED*(self: QsciScintillaBase, position: cint): void =

  fcQsciScintillaBase_SCN_STYLENEEDED(self.h, position)

proc miqt_exec_callback_QsciScintillaBase_SCN_STYLENEEDED(slot: int, position: cint) {.exportc.} =
  type Cb = proc(position: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = position


  nimfunc[](slotval1)

proc onSCN_STYLENEEDED*(self: QsciScintillaBase, slot: proc(position: cint)) =
  type Cb = proc(position: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_STYLENEEDED(self.h, cast[int](addr tmp[]))
proc SCN_URIDROPPED*(self: QsciScintillaBase, url: gen_qurl.QUrl): void =

  fcQsciScintillaBase_SCN_URIDROPPED(self.h, url.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_URIDROPPED(slot: int, url: pointer) {.exportc.} =
  type Cb = proc(url: gen_qurl.QUrl)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = gen_qurl.QUrl(h: url)


  nimfunc[](slotval1)

proc onSCN_URIDROPPED*(self: QsciScintillaBase, slot: proc(url: gen_qurl.QUrl)) =
  type Cb = proc(url: gen_qurl.QUrl)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_URIDROPPED(self.h, cast[int](addr tmp[]))
proc SCN_UPDATEUI*(self: QsciScintillaBase, updated: cint): void =

  fcQsciScintillaBase_SCN_UPDATEUI(self.h, updated)

proc miqt_exec_callback_QsciScintillaBase_SCN_UPDATEUI(slot: int, updated: cint) {.exportc.} =
  type Cb = proc(updated: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = updated


  nimfunc[](slotval1)

proc onSCN_UPDATEUI*(self: QsciScintillaBase, slot: proc(updated: cint)) =
  type Cb = proc(updated: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_UPDATEUI(self.h, cast[int](addr tmp[]))
proc SCN_USERLISTSELECTION*(self: QsciScintillaBase, selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint): void =

  fcQsciScintillaBase_SCN_USERLISTSELECTION(self.h, selection, id, ch, methodVal, position)

proc miqt_exec_callback_QsciScintillaBase_SCN_USERLISTSELECTION(slot: int, selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint) {.exportc.} =
  type Cb = proc(selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = id

  let slotval3 = ch

  let slotval4 = methodVal

  let slotval5 = position


  nimfunc[](slotval1, slotval2, slotval3, slotval4, slotval5)

proc onSCN_USERLISTSELECTION*(self: QsciScintillaBase, slot: proc(selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint)) =
  type Cb = proc(selection: cstring, id: cint, ch: cint, methodVal: cint, position: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_USERLISTSELECTION(self.h, cast[int](addr tmp[]))
proc SCN_USERLISTSELECTION2*(self: QsciScintillaBase, selection: cstring, id: cint, ch: cint, methodVal: cint): void =

  fcQsciScintillaBase_SCN_USERLISTSELECTION2(self.h, selection, id, ch, methodVal)

proc miqt_exec_callback_QsciScintillaBase_SCN_USERLISTSELECTION2(slot: int, selection: cstring, id: cint, ch: cint, methodVal: cint) {.exportc.} =
  type Cb = proc(selection: cstring, id: cint, ch: cint, methodVal: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = id

  let slotval3 = ch

  let slotval4 = methodVal


  nimfunc[](slotval1, slotval2, slotval3, slotval4)

proc onSCN_USERLISTSELECTION2*(self: QsciScintillaBase, slot: proc(selection: cstring, id: cint, ch: cint, methodVal: cint)) =
  type Cb = proc(selection: cstring, id: cint, ch: cint, methodVal: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_USERLISTSELECTION2(self.h, cast[int](addr tmp[]))
proc SCN_USERLISTSELECTION3*(self: QsciScintillaBase, selection: cstring, id: cint): void =

  fcQsciScintillaBase_SCN_USERLISTSELECTION3(self.h, selection, id)

proc miqt_exec_callback_QsciScintillaBase_SCN_USERLISTSELECTION3(slot: int, selection: cstring, id: cint) {.exportc.} =
  type Cb = proc(selection: cstring, id: cint)
  let nimfunc = cast[ptr Cb](cast[pointer](slot))
  let slotval1 = (selection)

  let slotval2 = id


  nimfunc[](slotval1, slotval2)

proc onSCN_USERLISTSELECTION3*(self: QsciScintillaBase, slot: proc(selection: cstring, id: cint)) =
  type Cb = proc(selection: cstring, id: cint)
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_USERLISTSELECTION3(self.h, cast[int](addr tmp[]))
proc SCN_ZOOM*(self: QsciScintillaBase, ): void =

  fcQsciScintillaBase_SCN_ZOOM(self.h)

proc miqt_exec_callback_QsciScintillaBase_SCN_ZOOM(slot: int) {.exportc.} =
  type Cb = proc()
  let nimfunc = cast[ptr Cb](cast[pointer](slot))

  nimfunc[]()

proc onSCN_ZOOM*(self: QsciScintillaBase, slot: proc()) =
  type Cb = proc()
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fQsciScintillaBase_connect_SCN_ZOOM(self.h, cast[int](addr tmp[]))
proc tr2*(_: type QsciScintillaBase, s: cstring, c: cstring): string =

  let v_ms = fcQsciScintillaBase_tr2(s, c)
  let vx_ret = string.fromBytes(toOpenArrayByte(v_ms.data, 0, int(v_ms.len)-1))
  c_free(v_ms.data)
  vx_ret

proc tr3*(_: type QsciScintillaBase, s: cstring, c: cstring, n: cint): string =

  let v_ms = fcQsciScintillaBase_tr3(s, c, n)
  let vx_ret = string.fromBytes(toOpenArrayByte(v_ms.data, 0, int(v_ms.len)-1))
  c_free(v_ms.data)
  vx_ret

proc SendScintilla22*(self: QsciScintillaBase, msg: cuint, wParam: culong): clong =

  fcQsciScintillaBase_SendScintilla22(self.h, msg, wParam)

proc SendScintilla32*(self: QsciScintillaBase, msg: cuint, wParam: culong, lParam: clong): clong =

  fcQsciScintillaBase_SendScintilla32(self.h, msg, wParam, lParam)

proc callVirtualBase_metacall(self: QsciScintillaBase, param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint =


  fQsciScintillaBase_virtualbase_metacall(self.h, cint(param1), param2, param3)

type QsciScintillaBasemetacallBase* = proc(param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint
proc onmetacall*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemetacallBase, param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemetacallBase, param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_metacall(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_metacall(self: ptr cQsciScintillaBase, slot: int, param1: cint, param2: cint, param3: pointer): cint {.exportc: "miqt_exec_callback_QsciScintillaBase_metacall ".} =
  type Cb = proc(super: QsciScintillaBasemetacallBase, param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): cint
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qobjectdefs.QMetaObjectCall, param2: cint, param3: pointer): auto =
    callVirtualBase_metacall(QsciScintillaBase(h: self), param1, param2, param3)
  let slotval1 = gen_qobjectdefs.QMetaObjectCall(param1)

  let slotval2 = param2

  let slotval3 = param3


  let virtualReturn = nimfunc[](superCall, slotval1, slotval2, slotval3 )

  virtualReturn
proc callVirtualBase_canInsertFromMimeData(self: QsciScintillaBase, source: gen_qmimedata.QMimeData): bool =


  fQsciScintillaBase_virtualbase_canInsertFromMimeData(self.h, source.h)

type QsciScintillaBasecanInsertFromMimeDataBase* = proc(source: gen_qmimedata.QMimeData): bool
proc oncanInsertFromMimeData*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasecanInsertFromMimeDataBase, source: gen_qmimedata.QMimeData): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasecanInsertFromMimeDataBase, source: gen_qmimedata.QMimeData): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_canInsertFromMimeData(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_canInsertFromMimeData(self: ptr cQsciScintillaBase, slot: int, source: pointer): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_canInsertFromMimeData ".} =
  type Cb = proc(super: QsciScintillaBasecanInsertFromMimeDataBase, source: gen_qmimedata.QMimeData): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(source: gen_qmimedata.QMimeData): auto =
    callVirtualBase_canInsertFromMimeData(QsciScintillaBase(h: self), source)
  let slotval1 = gen_qmimedata.QMimeData(h: source)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_fromMimeData(self: QsciScintillaBase, source: gen_qmimedata.QMimeData, rectangular: ptr bool): seq[byte] =


  var v_bytearray = fQsciScintillaBase_virtualbase_fromMimeData(self.h, source.h, rectangular)
  var vx_ret = @(toOpenArrayByte(v_bytearray.data, 0, int(v_bytearray.len)-1))
  c_free(v_bytearray.data)
  vx_ret

type QsciScintillaBasefromMimeDataBase* = proc(source: gen_qmimedata.QMimeData, rectangular: ptr bool): seq[byte]
proc onfromMimeData*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasefromMimeDataBase, source: gen_qmimedata.QMimeData, rectangular: ptr bool): seq[byte]) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasefromMimeDataBase, source: gen_qmimedata.QMimeData, rectangular: ptr bool): seq[byte]
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_fromMimeData(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_fromMimeData(self: ptr cQsciScintillaBase, slot: int, source: pointer, rectangular: ptr bool): struct_miqt_string {.exportc: "miqt_exec_callback_QsciScintillaBase_fromMimeData ".} =
  type Cb = proc(super: QsciScintillaBasefromMimeDataBase, source: gen_qmimedata.QMimeData, rectangular: ptr bool): seq[byte]
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(source: gen_qmimedata.QMimeData, rectangular: ptr bool): auto =
    callVirtualBase_fromMimeData(QsciScintillaBase(h: self), source, rectangular)
  let slotval1 = gen_qmimedata.QMimeData(h: source)

  let slotval2 = rectangular


  let virtualReturn = nimfunc[](superCall, slotval1, slotval2 )

  struct_miqt_string(data: cast[cstring](if len(virtualReturn) == 0: nil else: unsafeAddr virtualReturn[0]), len: csize_t(len(virtualReturn)))
proc callVirtualBase_toMimeData(self: QsciScintillaBase, text: seq[byte], rectangular: bool): gen_qmimedata.QMimeData =


  gen_qmimedata.QMimeData(h: fQsciScintillaBase_virtualbase_toMimeData(self.h, struct_miqt_string(data: cast[cstring](if len(text) == 0: nil else: unsafeAddr text[0]), len: csize_t(len(text))), rectangular))

type QsciScintillaBasetoMimeDataBase* = proc(text: seq[byte], rectangular: bool): gen_qmimedata.QMimeData
proc ontoMimeData*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasetoMimeDataBase, text: seq[byte], rectangular: bool): gen_qmimedata.QMimeData) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasetoMimeDataBase, text: seq[byte], rectangular: bool): gen_qmimedata.QMimeData
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_toMimeData(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_toMimeData(self: ptr cQsciScintillaBase, slot: int, text: struct_miqt_string, rectangular: bool): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_toMimeData ".} =
  type Cb = proc(super: QsciScintillaBasetoMimeDataBase, text: seq[byte], rectangular: bool): gen_qmimedata.QMimeData
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(text: seq[byte], rectangular: bool): auto =
    callVirtualBase_toMimeData(QsciScintillaBase(h: self), text, rectangular)
  var vtext_bytearray = text
  var vtextx_ret = @(toOpenArrayByte(vtext_bytearray.data, 0, int(vtext_bytearray.len)-1))
  c_free(vtext_bytearray.data)
  let slotval1 = vtextx_ret

  let slotval2 = rectangular


  let virtualReturn = nimfunc[](superCall, slotval1, slotval2 )

  virtualReturn.h
proc callVirtualBase_changeEvent(self: QsciScintillaBase, e: gen_qcoreevent.QEvent): void =


  fQsciScintillaBase_virtualbase_changeEvent(self.h, e.h)

type QsciScintillaBasechangeEventBase* = proc(e: gen_qcoreevent.QEvent): void
proc onchangeEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasechangeEventBase, e: gen_qcoreevent.QEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasechangeEventBase, e: gen_qcoreevent.QEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_changeEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_changeEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_changeEvent ".} =
  type Cb = proc(super: QsciScintillaBasechangeEventBase, e: gen_qcoreevent.QEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qcoreevent.QEvent): auto =
    callVirtualBase_changeEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qcoreevent.QEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_contextMenuEvent(self: QsciScintillaBase, e: gen_qevent.QContextMenuEvent): void =


  fQsciScintillaBase_virtualbase_contextMenuEvent(self.h, e.h)

type QsciScintillaBasecontextMenuEventBase* = proc(e: gen_qevent.QContextMenuEvent): void
proc oncontextMenuEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasecontextMenuEventBase, e: gen_qevent.QContextMenuEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasecontextMenuEventBase, e: gen_qevent.QContextMenuEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_contextMenuEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_contextMenuEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_contextMenuEvent ".} =
  type Cb = proc(super: QsciScintillaBasecontextMenuEventBase, e: gen_qevent.QContextMenuEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QContextMenuEvent): auto =
    callVirtualBase_contextMenuEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QContextMenuEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_dragEnterEvent(self: QsciScintillaBase, e: gen_qevent.QDragEnterEvent): void =


  fQsciScintillaBase_virtualbase_dragEnterEvent(self.h, e.h)

type QsciScintillaBasedragEnterEventBase* = proc(e: gen_qevent.QDragEnterEvent): void
proc ondragEnterEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedragEnterEventBase, e: gen_qevent.QDragEnterEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedragEnterEventBase, e: gen_qevent.QDragEnterEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_dragEnterEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_dragEnterEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_dragEnterEvent ".} =
  type Cb = proc(super: QsciScintillaBasedragEnterEventBase, e: gen_qevent.QDragEnterEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QDragEnterEvent): auto =
    callVirtualBase_dragEnterEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QDragEnterEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_dragLeaveEvent(self: QsciScintillaBase, e: gen_qevent.QDragLeaveEvent): void =


  fQsciScintillaBase_virtualbase_dragLeaveEvent(self.h, e.h)

type QsciScintillaBasedragLeaveEventBase* = proc(e: gen_qevent.QDragLeaveEvent): void
proc ondragLeaveEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedragLeaveEventBase, e: gen_qevent.QDragLeaveEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedragLeaveEventBase, e: gen_qevent.QDragLeaveEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_dragLeaveEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_dragLeaveEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_dragLeaveEvent ".} =
  type Cb = proc(super: QsciScintillaBasedragLeaveEventBase, e: gen_qevent.QDragLeaveEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QDragLeaveEvent): auto =
    callVirtualBase_dragLeaveEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QDragLeaveEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_dragMoveEvent(self: QsciScintillaBase, e: gen_qevent.QDragMoveEvent): void =


  fQsciScintillaBase_virtualbase_dragMoveEvent(self.h, e.h)

type QsciScintillaBasedragMoveEventBase* = proc(e: gen_qevent.QDragMoveEvent): void
proc ondragMoveEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedragMoveEventBase, e: gen_qevent.QDragMoveEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedragMoveEventBase, e: gen_qevent.QDragMoveEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_dragMoveEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_dragMoveEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_dragMoveEvent ".} =
  type Cb = proc(super: QsciScintillaBasedragMoveEventBase, e: gen_qevent.QDragMoveEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QDragMoveEvent): auto =
    callVirtualBase_dragMoveEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QDragMoveEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_dropEvent(self: QsciScintillaBase, e: gen_qevent.QDropEvent): void =


  fQsciScintillaBase_virtualbase_dropEvent(self.h, e.h)

type QsciScintillaBasedropEventBase* = proc(e: gen_qevent.QDropEvent): void
proc ondropEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedropEventBase, e: gen_qevent.QDropEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedropEventBase, e: gen_qevent.QDropEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_dropEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_dropEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_dropEvent ".} =
  type Cb = proc(super: QsciScintillaBasedropEventBase, e: gen_qevent.QDropEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QDropEvent): auto =
    callVirtualBase_dropEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QDropEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_focusInEvent(self: QsciScintillaBase, e: gen_qevent.QFocusEvent): void =


  fQsciScintillaBase_virtualbase_focusInEvent(self.h, e.h)

type QsciScintillaBasefocusInEventBase* = proc(e: gen_qevent.QFocusEvent): void
proc onfocusInEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasefocusInEventBase, e: gen_qevent.QFocusEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasefocusInEventBase, e: gen_qevent.QFocusEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_focusInEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_focusInEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_focusInEvent ".} =
  type Cb = proc(super: QsciScintillaBasefocusInEventBase, e: gen_qevent.QFocusEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QFocusEvent): auto =
    callVirtualBase_focusInEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QFocusEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_focusOutEvent(self: QsciScintillaBase, e: gen_qevent.QFocusEvent): void =


  fQsciScintillaBase_virtualbase_focusOutEvent(self.h, e.h)

type QsciScintillaBasefocusOutEventBase* = proc(e: gen_qevent.QFocusEvent): void
proc onfocusOutEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasefocusOutEventBase, e: gen_qevent.QFocusEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasefocusOutEventBase, e: gen_qevent.QFocusEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_focusOutEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_focusOutEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_focusOutEvent ".} =
  type Cb = proc(super: QsciScintillaBasefocusOutEventBase, e: gen_qevent.QFocusEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QFocusEvent): auto =
    callVirtualBase_focusOutEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QFocusEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_focusNextPrevChild(self: QsciScintillaBase, next: bool): bool =


  fQsciScintillaBase_virtualbase_focusNextPrevChild(self.h, next)

type QsciScintillaBasefocusNextPrevChildBase* = proc(next: bool): bool
proc onfocusNextPrevChild*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasefocusNextPrevChildBase, next: bool): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasefocusNextPrevChildBase, next: bool): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_focusNextPrevChild(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_focusNextPrevChild(self: ptr cQsciScintillaBase, slot: int, next: bool): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_focusNextPrevChild ".} =
  type Cb = proc(super: QsciScintillaBasefocusNextPrevChildBase, next: bool): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(next: bool): auto =
    callVirtualBase_focusNextPrevChild(QsciScintillaBase(h: self), next)
  let slotval1 = next


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_keyPressEvent(self: QsciScintillaBase, e: gen_qevent.QKeyEvent): void =


  fQsciScintillaBase_virtualbase_keyPressEvent(self.h, e.h)

type QsciScintillaBasekeyPressEventBase* = proc(e: gen_qevent.QKeyEvent): void
proc onkeyPressEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasekeyPressEventBase, e: gen_qevent.QKeyEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasekeyPressEventBase, e: gen_qevent.QKeyEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_keyPressEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_keyPressEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_keyPressEvent ".} =
  type Cb = proc(super: QsciScintillaBasekeyPressEventBase, e: gen_qevent.QKeyEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QKeyEvent): auto =
    callVirtualBase_keyPressEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QKeyEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_inputMethodEvent(self: QsciScintillaBase, event: gen_qevent.QInputMethodEvent): void =


  fQsciScintillaBase_virtualbase_inputMethodEvent(self.h, event.h)

type QsciScintillaBaseinputMethodEventBase* = proc(event: gen_qevent.QInputMethodEvent): void
proc oninputMethodEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseinputMethodEventBase, event: gen_qevent.QInputMethodEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseinputMethodEventBase, event: gen_qevent.QInputMethodEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_inputMethodEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_inputMethodEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_inputMethodEvent ".} =
  type Cb = proc(super: QsciScintillaBaseinputMethodEventBase, event: gen_qevent.QInputMethodEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QInputMethodEvent): auto =
    callVirtualBase_inputMethodEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QInputMethodEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_inputMethodQuery(self: QsciScintillaBase, query: gen_qnamespace.InputMethodQuery): gen_qvariant.QVariant =


  gen_qvariant.QVariant(h: fQsciScintillaBase_virtualbase_inputMethodQuery(self.h, cint(query)))

type QsciScintillaBaseinputMethodQueryBase* = proc(query: gen_qnamespace.InputMethodQuery): gen_qvariant.QVariant
proc oninputMethodQuery*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseinputMethodQueryBase, query: gen_qnamespace.InputMethodQuery): gen_qvariant.QVariant) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseinputMethodQueryBase, query: gen_qnamespace.InputMethodQuery): gen_qvariant.QVariant
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_inputMethodQuery(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_inputMethodQuery(self: ptr cQsciScintillaBase, slot: int, query: cint): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_inputMethodQuery ".} =
  type Cb = proc(super: QsciScintillaBaseinputMethodQueryBase, query: gen_qnamespace.InputMethodQuery): gen_qvariant.QVariant
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(query: gen_qnamespace.InputMethodQuery): auto =
    callVirtualBase_inputMethodQuery(QsciScintillaBase(h: self), query)
  let slotval1 = gen_qnamespace.InputMethodQuery(query)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn.h
proc callVirtualBase_mouseDoubleClickEvent(self: QsciScintillaBase, e: gen_qevent.QMouseEvent): void =


  fQsciScintillaBase_virtualbase_mouseDoubleClickEvent(self.h, e.h)

type QsciScintillaBasemouseDoubleClickEventBase* = proc(e: gen_qevent.QMouseEvent): void
proc onmouseDoubleClickEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemouseDoubleClickEventBase, e: gen_qevent.QMouseEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemouseDoubleClickEventBase, e: gen_qevent.QMouseEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_mouseDoubleClickEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_mouseDoubleClickEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_mouseDoubleClickEvent ".} =
  type Cb = proc(super: QsciScintillaBasemouseDoubleClickEventBase, e: gen_qevent.QMouseEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QMouseEvent): auto =
    callVirtualBase_mouseDoubleClickEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QMouseEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_mouseMoveEvent(self: QsciScintillaBase, e: gen_qevent.QMouseEvent): void =


  fQsciScintillaBase_virtualbase_mouseMoveEvent(self.h, e.h)

type QsciScintillaBasemouseMoveEventBase* = proc(e: gen_qevent.QMouseEvent): void
proc onmouseMoveEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemouseMoveEventBase, e: gen_qevent.QMouseEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemouseMoveEventBase, e: gen_qevent.QMouseEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_mouseMoveEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_mouseMoveEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_mouseMoveEvent ".} =
  type Cb = proc(super: QsciScintillaBasemouseMoveEventBase, e: gen_qevent.QMouseEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QMouseEvent): auto =
    callVirtualBase_mouseMoveEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QMouseEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_mousePressEvent(self: QsciScintillaBase, e: gen_qevent.QMouseEvent): void =


  fQsciScintillaBase_virtualbase_mousePressEvent(self.h, e.h)

type QsciScintillaBasemousePressEventBase* = proc(e: gen_qevent.QMouseEvent): void
proc onmousePressEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemousePressEventBase, e: gen_qevent.QMouseEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemousePressEventBase, e: gen_qevent.QMouseEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_mousePressEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_mousePressEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_mousePressEvent ".} =
  type Cb = proc(super: QsciScintillaBasemousePressEventBase, e: gen_qevent.QMouseEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QMouseEvent): auto =
    callVirtualBase_mousePressEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QMouseEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_mouseReleaseEvent(self: QsciScintillaBase, e: gen_qevent.QMouseEvent): void =


  fQsciScintillaBase_virtualbase_mouseReleaseEvent(self.h, e.h)

type QsciScintillaBasemouseReleaseEventBase* = proc(e: gen_qevent.QMouseEvent): void
proc onmouseReleaseEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemouseReleaseEventBase, e: gen_qevent.QMouseEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemouseReleaseEventBase, e: gen_qevent.QMouseEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_mouseReleaseEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_mouseReleaseEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_mouseReleaseEvent ".} =
  type Cb = proc(super: QsciScintillaBasemouseReleaseEventBase, e: gen_qevent.QMouseEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QMouseEvent): auto =
    callVirtualBase_mouseReleaseEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QMouseEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_paintEvent(self: QsciScintillaBase, e: gen_qevent.QPaintEvent): void =


  fQsciScintillaBase_virtualbase_paintEvent(self.h, e.h)

type QsciScintillaBasepaintEventBase* = proc(e: gen_qevent.QPaintEvent): void
proc onpaintEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasepaintEventBase, e: gen_qevent.QPaintEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasepaintEventBase, e: gen_qevent.QPaintEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_paintEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_paintEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_paintEvent ".} =
  type Cb = proc(super: QsciScintillaBasepaintEventBase, e: gen_qevent.QPaintEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QPaintEvent): auto =
    callVirtualBase_paintEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QPaintEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_resizeEvent(self: QsciScintillaBase, e: gen_qevent.QResizeEvent): void =


  fQsciScintillaBase_virtualbase_resizeEvent(self.h, e.h)

type QsciScintillaBaseresizeEventBase* = proc(e: gen_qevent.QResizeEvent): void
proc onresizeEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseresizeEventBase, e: gen_qevent.QResizeEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseresizeEventBase, e: gen_qevent.QResizeEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_resizeEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_resizeEvent(self: ptr cQsciScintillaBase, slot: int, e: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_resizeEvent ".} =
  type Cb = proc(super: QsciScintillaBaseresizeEventBase, e: gen_qevent.QResizeEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(e: gen_qevent.QResizeEvent): auto =
    callVirtualBase_resizeEvent(QsciScintillaBase(h: self), e)
  let slotval1 = gen_qevent.QResizeEvent(h: e)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_scrollContentsBy(self: QsciScintillaBase, dx: cint, dy: cint): void =


  fQsciScintillaBase_virtualbase_scrollContentsBy(self.h, dx, dy)

type QsciScintillaBasescrollContentsByBase* = proc(dx: cint, dy: cint): void
proc onscrollContentsBy*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasescrollContentsByBase, dx: cint, dy: cint): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasescrollContentsByBase, dx: cint, dy: cint): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_scrollContentsBy(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_scrollContentsBy(self: ptr cQsciScintillaBase, slot: int, dx: cint, dy: cint): void {.exportc: "miqt_exec_callback_QsciScintillaBase_scrollContentsBy ".} =
  type Cb = proc(super: QsciScintillaBasescrollContentsByBase, dx: cint, dy: cint): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(dx: cint, dy: cint): auto =
    callVirtualBase_scrollContentsBy(QsciScintillaBase(h: self), dx, dy)
  let slotval1 = dx

  let slotval2 = dy


  nimfunc[](superCall, slotval1, slotval2)
proc callVirtualBase_minimumSizeHint(self: QsciScintillaBase, ): gen_qsize.QSize =


  gen_qsize.QSize(h: fQsciScintillaBase_virtualbase_minimumSizeHint(self.h))

type QsciScintillaBaseminimumSizeHintBase* = proc(): gen_qsize.QSize
proc onminimumSizeHint*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseminimumSizeHintBase): gen_qsize.QSize) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseminimumSizeHintBase): gen_qsize.QSize
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_minimumSizeHint(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_minimumSizeHint(self: ptr cQsciScintillaBase, slot: int): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_minimumSizeHint ".} =
  type Cb = proc(super: QsciScintillaBaseminimumSizeHintBase): gen_qsize.QSize
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_minimumSizeHint(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn.h
proc callVirtualBase_sizeHint(self: QsciScintillaBase, ): gen_qsize.QSize =


  gen_qsize.QSize(h: fQsciScintillaBase_virtualbase_sizeHint(self.h))

type QsciScintillaBasesizeHintBase* = proc(): gen_qsize.QSize
proc onsizeHint*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasesizeHintBase): gen_qsize.QSize) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasesizeHintBase): gen_qsize.QSize
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_sizeHint(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_sizeHint(self: ptr cQsciScintillaBase, slot: int): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_sizeHint ".} =
  type Cb = proc(super: QsciScintillaBasesizeHintBase): gen_qsize.QSize
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_sizeHint(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn.h
proc callVirtualBase_setupViewport(self: QsciScintillaBase, viewport: gen_qwidget.QWidget): void =


  fQsciScintillaBase_virtualbase_setupViewport(self.h, viewport.h)

type QsciScintillaBasesetupViewportBase* = proc(viewport: gen_qwidget.QWidget): void
proc onsetupViewport*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasesetupViewportBase, viewport: gen_qwidget.QWidget): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasesetupViewportBase, viewport: gen_qwidget.QWidget): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_setupViewport(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_setupViewport(self: ptr cQsciScintillaBase, slot: int, viewport: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_setupViewport ".} =
  type Cb = proc(super: QsciScintillaBasesetupViewportBase, viewport: gen_qwidget.QWidget): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(viewport: gen_qwidget.QWidget): auto =
    callVirtualBase_setupViewport(QsciScintillaBase(h: self), viewport)
  let slotval1 = gen_qwidget.QWidget(h: viewport)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_eventFilter(self: QsciScintillaBase, param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): bool =


  fQsciScintillaBase_virtualbase_eventFilter(self.h, param1.h, param2.h)

type QsciScintillaBaseeventFilterBase* = proc(param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): bool
proc oneventFilter*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseeventFilterBase, param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseeventFilterBase, param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_eventFilter(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_eventFilter(self: ptr cQsciScintillaBase, slot: int, param1: pointer, param2: pointer): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_eventFilter ".} =
  type Cb = proc(super: QsciScintillaBaseeventFilterBase, param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qobject.QObject, param2: gen_qcoreevent.QEvent): auto =
    callVirtualBase_eventFilter(QsciScintillaBase(h: self), param1, param2)
  let slotval1 = gen_qobject.QObject(h: param1)

  let slotval2 = gen_qcoreevent.QEvent(h: param2)


  let virtualReturn = nimfunc[](superCall, slotval1, slotval2 )

  virtualReturn
proc callVirtualBase_event(self: QsciScintillaBase, param1: gen_qcoreevent.QEvent): bool =


  fQsciScintillaBase_virtualbase_event(self.h, param1.h)

type QsciScintillaBaseeventBase* = proc(param1: gen_qcoreevent.QEvent): bool
proc onevent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseeventBase, param1: gen_qcoreevent.QEvent): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseeventBase, param1: gen_qcoreevent.QEvent): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_event(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_event(self: ptr cQsciScintillaBase, slot: int, param1: pointer): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_event ".} =
  type Cb = proc(super: QsciScintillaBaseeventBase, param1: gen_qcoreevent.QEvent): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qcoreevent.QEvent): auto =
    callVirtualBase_event(QsciScintillaBase(h: self), param1)
  let slotval1 = gen_qcoreevent.QEvent(h: param1)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_viewportEvent(self: QsciScintillaBase, param1: gen_qcoreevent.QEvent): bool =


  fQsciScintillaBase_virtualbase_viewportEvent(self.h, param1.h)

type QsciScintillaBaseviewportEventBase* = proc(param1: gen_qcoreevent.QEvent): bool
proc onviewportEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseviewportEventBase, param1: gen_qcoreevent.QEvent): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseviewportEventBase, param1: gen_qcoreevent.QEvent): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_viewportEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_viewportEvent(self: ptr cQsciScintillaBase, slot: int, param1: pointer): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_viewportEvent ".} =
  type Cb = proc(super: QsciScintillaBaseviewportEventBase, param1: gen_qcoreevent.QEvent): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qcoreevent.QEvent): auto =
    callVirtualBase_viewportEvent(QsciScintillaBase(h: self), param1)
  let slotval1 = gen_qcoreevent.QEvent(h: param1)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_wheelEvent(self: QsciScintillaBase, param1: gen_qevent.QWheelEvent): void =


  fQsciScintillaBase_virtualbase_wheelEvent(self.h, param1.h)

type QsciScintillaBasewheelEventBase* = proc(param1: gen_qevent.QWheelEvent): void
proc onwheelEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasewheelEventBase, param1: gen_qevent.QWheelEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasewheelEventBase, param1: gen_qevent.QWheelEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_wheelEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_wheelEvent(self: ptr cQsciScintillaBase, slot: int, param1: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_wheelEvent ".} =
  type Cb = proc(super: QsciScintillaBasewheelEventBase, param1: gen_qevent.QWheelEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qevent.QWheelEvent): auto =
    callVirtualBase_wheelEvent(QsciScintillaBase(h: self), param1)
  let slotval1 = gen_qevent.QWheelEvent(h: param1)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_viewportSizeHint(self: QsciScintillaBase, ): gen_qsize.QSize =


  gen_qsize.QSize(h: fQsciScintillaBase_virtualbase_viewportSizeHint(self.h))

type QsciScintillaBaseviewportSizeHintBase* = proc(): gen_qsize.QSize
proc onviewportSizeHint*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseviewportSizeHintBase): gen_qsize.QSize) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseviewportSizeHintBase): gen_qsize.QSize
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_viewportSizeHint(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_viewportSizeHint(self: ptr cQsciScintillaBase, slot: int): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_viewportSizeHint ".} =
  type Cb = proc(super: QsciScintillaBaseviewportSizeHintBase): gen_qsize.QSize
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_viewportSizeHint(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn.h
proc callVirtualBase_initStyleOption(self: QsciScintillaBase, option: gen_qstyleoption.QStyleOptionFrame): void =


  fQsciScintillaBase_virtualbase_initStyleOption(self.h, option.h)

type QsciScintillaBaseinitStyleOptionBase* = proc(option: gen_qstyleoption.QStyleOptionFrame): void
proc oninitStyleOption*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseinitStyleOptionBase, option: gen_qstyleoption.QStyleOptionFrame): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseinitStyleOptionBase, option: gen_qstyleoption.QStyleOptionFrame): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_initStyleOption(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_initStyleOption(self: ptr cQsciScintillaBase, slot: int, option: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_initStyleOption ".} =
  type Cb = proc(super: QsciScintillaBaseinitStyleOptionBase, option: gen_qstyleoption.QStyleOptionFrame): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(option: gen_qstyleoption.QStyleOptionFrame): auto =
    callVirtualBase_initStyleOption(QsciScintillaBase(h: self), option)
  let slotval1 = gen_qstyleoption.QStyleOptionFrame(h: option)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_devType(self: QsciScintillaBase, ): cint =


  fQsciScintillaBase_virtualbase_devType(self.h)

type QsciScintillaBasedevTypeBase* = proc(): cint
proc ondevType*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedevTypeBase): cint) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedevTypeBase): cint
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_devType(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_devType(self: ptr cQsciScintillaBase, slot: int): cint {.exportc: "miqt_exec_callback_QsciScintillaBase_devType ".} =
  type Cb = proc(super: QsciScintillaBasedevTypeBase): cint
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_devType(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn
proc callVirtualBase_setVisible(self: QsciScintillaBase, visible: bool): void =


  fQsciScintillaBase_virtualbase_setVisible(self.h, visible)

type QsciScintillaBasesetVisibleBase* = proc(visible: bool): void
proc onsetVisible*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasesetVisibleBase, visible: bool): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasesetVisibleBase, visible: bool): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_setVisible(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_setVisible(self: ptr cQsciScintillaBase, slot: int, visible: bool): void {.exportc: "miqt_exec_callback_QsciScintillaBase_setVisible ".} =
  type Cb = proc(super: QsciScintillaBasesetVisibleBase, visible: bool): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(visible: bool): auto =
    callVirtualBase_setVisible(QsciScintillaBase(h: self), visible)
  let slotval1 = visible


  nimfunc[](superCall, slotval1)
proc callVirtualBase_heightForWidth(self: QsciScintillaBase, param1: cint): cint =


  fQsciScintillaBase_virtualbase_heightForWidth(self.h, param1)

type QsciScintillaBaseheightForWidthBase* = proc(param1: cint): cint
proc onheightForWidth*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseheightForWidthBase, param1: cint): cint) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseheightForWidthBase, param1: cint): cint
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_heightForWidth(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_heightForWidth(self: ptr cQsciScintillaBase, slot: int, param1: cint): cint {.exportc: "miqt_exec_callback_QsciScintillaBase_heightForWidth ".} =
  type Cb = proc(super: QsciScintillaBaseheightForWidthBase, param1: cint): cint
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: cint): auto =
    callVirtualBase_heightForWidth(QsciScintillaBase(h: self), param1)
  let slotval1 = param1


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_hasHeightForWidth(self: QsciScintillaBase, ): bool =


  fQsciScintillaBase_virtualbase_hasHeightForWidth(self.h)

type QsciScintillaBasehasHeightForWidthBase* = proc(): bool
proc onhasHeightForWidth*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasehasHeightForWidthBase): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasehasHeightForWidthBase): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_hasHeightForWidth(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_hasHeightForWidth(self: ptr cQsciScintillaBase, slot: int): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_hasHeightForWidth ".} =
  type Cb = proc(super: QsciScintillaBasehasHeightForWidthBase): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_hasHeightForWidth(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn
proc callVirtualBase_paintEngine(self: QsciScintillaBase, ): gen_qpaintengine.QPaintEngine =


  gen_qpaintengine.QPaintEngine(h: fQsciScintillaBase_virtualbase_paintEngine(self.h))

type QsciScintillaBasepaintEngineBase* = proc(): gen_qpaintengine.QPaintEngine
proc onpaintEngine*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasepaintEngineBase): gen_qpaintengine.QPaintEngine) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasepaintEngineBase): gen_qpaintengine.QPaintEngine
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_paintEngine(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_paintEngine(self: ptr cQsciScintillaBase, slot: int): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_paintEngine ".} =
  type Cb = proc(super: QsciScintillaBasepaintEngineBase): gen_qpaintengine.QPaintEngine
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_paintEngine(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn.h
proc callVirtualBase_keyReleaseEvent(self: QsciScintillaBase, event: gen_qevent.QKeyEvent): void =


  fQsciScintillaBase_virtualbase_keyReleaseEvent(self.h, event.h)

type QsciScintillaBasekeyReleaseEventBase* = proc(event: gen_qevent.QKeyEvent): void
proc onkeyReleaseEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasekeyReleaseEventBase, event: gen_qevent.QKeyEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasekeyReleaseEventBase, event: gen_qevent.QKeyEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_keyReleaseEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_keyReleaseEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_keyReleaseEvent ".} =
  type Cb = proc(super: QsciScintillaBasekeyReleaseEventBase, event: gen_qevent.QKeyEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QKeyEvent): auto =
    callVirtualBase_keyReleaseEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QKeyEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_enterEvent(self: QsciScintillaBase, event: gen_qevent.QEnterEvent): void =


  fQsciScintillaBase_virtualbase_enterEvent(self.h, event.h)

type QsciScintillaBaseenterEventBase* = proc(event: gen_qevent.QEnterEvent): void
proc onenterEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseenterEventBase, event: gen_qevent.QEnterEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseenterEventBase, event: gen_qevent.QEnterEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_enterEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_enterEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_enterEvent ".} =
  type Cb = proc(super: QsciScintillaBaseenterEventBase, event: gen_qevent.QEnterEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QEnterEvent): auto =
    callVirtualBase_enterEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QEnterEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_leaveEvent(self: QsciScintillaBase, event: gen_qcoreevent.QEvent): void =


  fQsciScintillaBase_virtualbase_leaveEvent(self.h, event.h)

type QsciScintillaBaseleaveEventBase* = proc(event: gen_qcoreevent.QEvent): void
proc onleaveEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseleaveEventBase, event: gen_qcoreevent.QEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseleaveEventBase, event: gen_qcoreevent.QEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_leaveEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_leaveEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_leaveEvent ".} =
  type Cb = proc(super: QsciScintillaBaseleaveEventBase, event: gen_qcoreevent.QEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qcoreevent.QEvent): auto =
    callVirtualBase_leaveEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qcoreevent.QEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_moveEvent(self: QsciScintillaBase, event: gen_qevent.QMoveEvent): void =


  fQsciScintillaBase_virtualbase_moveEvent(self.h, event.h)

type QsciScintillaBasemoveEventBase* = proc(event: gen_qevent.QMoveEvent): void
proc onmoveEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemoveEventBase, event: gen_qevent.QMoveEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemoveEventBase, event: gen_qevent.QMoveEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_moveEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_moveEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_moveEvent ".} =
  type Cb = proc(super: QsciScintillaBasemoveEventBase, event: gen_qevent.QMoveEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QMoveEvent): auto =
    callVirtualBase_moveEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QMoveEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_closeEvent(self: QsciScintillaBase, event: gen_qevent.QCloseEvent): void =


  fQsciScintillaBase_virtualbase_closeEvent(self.h, event.h)

type QsciScintillaBasecloseEventBase* = proc(event: gen_qevent.QCloseEvent): void
proc oncloseEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasecloseEventBase, event: gen_qevent.QCloseEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasecloseEventBase, event: gen_qevent.QCloseEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_closeEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_closeEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_closeEvent ".} =
  type Cb = proc(super: QsciScintillaBasecloseEventBase, event: gen_qevent.QCloseEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QCloseEvent): auto =
    callVirtualBase_closeEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QCloseEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_tabletEvent(self: QsciScintillaBase, event: gen_qevent.QTabletEvent): void =


  fQsciScintillaBase_virtualbase_tabletEvent(self.h, event.h)

type QsciScintillaBasetabletEventBase* = proc(event: gen_qevent.QTabletEvent): void
proc ontabletEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasetabletEventBase, event: gen_qevent.QTabletEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasetabletEventBase, event: gen_qevent.QTabletEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_tabletEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_tabletEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_tabletEvent ".} =
  type Cb = proc(super: QsciScintillaBasetabletEventBase, event: gen_qevent.QTabletEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QTabletEvent): auto =
    callVirtualBase_tabletEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QTabletEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_actionEvent(self: QsciScintillaBase, event: gen_qevent.QActionEvent): void =


  fQsciScintillaBase_virtualbase_actionEvent(self.h, event.h)

type QsciScintillaBaseactionEventBase* = proc(event: gen_qevent.QActionEvent): void
proc onactionEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseactionEventBase, event: gen_qevent.QActionEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseactionEventBase, event: gen_qevent.QActionEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_actionEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_actionEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_actionEvent ".} =
  type Cb = proc(super: QsciScintillaBaseactionEventBase, event: gen_qevent.QActionEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QActionEvent): auto =
    callVirtualBase_actionEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QActionEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_showEvent(self: QsciScintillaBase, event: gen_qevent.QShowEvent): void =


  fQsciScintillaBase_virtualbase_showEvent(self.h, event.h)

type QsciScintillaBaseshowEventBase* = proc(event: gen_qevent.QShowEvent): void
proc onshowEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseshowEventBase, event: gen_qevent.QShowEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseshowEventBase, event: gen_qevent.QShowEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_showEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_showEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_showEvent ".} =
  type Cb = proc(super: QsciScintillaBaseshowEventBase, event: gen_qevent.QShowEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QShowEvent): auto =
    callVirtualBase_showEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QShowEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_hideEvent(self: QsciScintillaBase, event: gen_qevent.QHideEvent): void =


  fQsciScintillaBase_virtualbase_hideEvent(self.h, event.h)

type QsciScintillaBasehideEventBase* = proc(event: gen_qevent.QHideEvent): void
proc onhideEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasehideEventBase, event: gen_qevent.QHideEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasehideEventBase, event: gen_qevent.QHideEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_hideEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_hideEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_hideEvent ".} =
  type Cb = proc(super: QsciScintillaBasehideEventBase, event: gen_qevent.QHideEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qevent.QHideEvent): auto =
    callVirtualBase_hideEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qevent.QHideEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_nativeEvent(self: QsciScintillaBase, eventType: seq[byte], message: pointer, resultVal: ptr uint): bool =


  fQsciScintillaBase_virtualbase_nativeEvent(self.h, struct_miqt_string(data: cast[cstring](if len(eventType) == 0: nil else: unsafeAddr eventType[0]), len: csize_t(len(eventType))), message, resultVal)

type QsciScintillaBasenativeEventBase* = proc(eventType: seq[byte], message: pointer, resultVal: ptr uint): bool
proc onnativeEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasenativeEventBase, eventType: seq[byte], message: pointer, resultVal: ptr uint): bool) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasenativeEventBase, eventType: seq[byte], message: pointer, resultVal: ptr uint): bool
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_nativeEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_nativeEvent(self: ptr cQsciScintillaBase, slot: int, eventType: struct_miqt_string, message: pointer, resultVal: ptr uint): bool {.exportc: "miqt_exec_callback_QsciScintillaBase_nativeEvent ".} =
  type Cb = proc(super: QsciScintillaBasenativeEventBase, eventType: seq[byte], message: pointer, resultVal: ptr uint): bool
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(eventType: seq[byte], message: pointer, resultVal: ptr uint): auto =
    callVirtualBase_nativeEvent(QsciScintillaBase(h: self), eventType, message, resultVal)
  var veventType_bytearray = eventType
  var veventTypex_ret = @(toOpenArrayByte(veventType_bytearray.data, 0, int(veventType_bytearray.len)-1))
  c_free(veventType_bytearray.data)
  let slotval1 = veventTypex_ret

  let slotval2 = message

  let slotval3 = resultVal


  let virtualReturn = nimfunc[](superCall, slotval1, slotval2, slotval3 )

  virtualReturn
proc callVirtualBase_metric(self: QsciScintillaBase, param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): cint =


  fQsciScintillaBase_virtualbase_metric(self.h, cint(param1))

type QsciScintillaBasemetricBase* = proc(param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): cint
proc onmetric*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasemetricBase, param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): cint) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasemetricBase, param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): cint
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_metric(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_metric(self: ptr cQsciScintillaBase, slot: int, param1: cint): cint {.exportc: "miqt_exec_callback_QsciScintillaBase_metric ".} =
  type Cb = proc(super: QsciScintillaBasemetricBase, param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): cint
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(param1: gen_qpaintdevice.QPaintDevicePaintDeviceMetric): auto =
    callVirtualBase_metric(QsciScintillaBase(h: self), param1)
  let slotval1 = gen_qpaintdevice.QPaintDevicePaintDeviceMetric(param1)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn
proc callVirtualBase_initPainter(self: QsciScintillaBase, painter: gen_qpainter.QPainter): void =


  fQsciScintillaBase_virtualbase_initPainter(self.h, painter.h)

type QsciScintillaBaseinitPainterBase* = proc(painter: gen_qpainter.QPainter): void
proc oninitPainter*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseinitPainterBase, painter: gen_qpainter.QPainter): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseinitPainterBase, painter: gen_qpainter.QPainter): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_initPainter(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_initPainter(self: ptr cQsciScintillaBase, slot: int, painter: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_initPainter ".} =
  type Cb = proc(super: QsciScintillaBaseinitPainterBase, painter: gen_qpainter.QPainter): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(painter: gen_qpainter.QPainter): auto =
    callVirtualBase_initPainter(QsciScintillaBase(h: self), painter)
  let slotval1 = gen_qpainter.QPainter(h: painter)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_redirected(self: QsciScintillaBase, offset: gen_qpoint.QPoint): gen_qpaintdevice.QPaintDevice =


  gen_qpaintdevice.QPaintDevice(h: fQsciScintillaBase_virtualbase_redirected(self.h, offset.h))

type QsciScintillaBaseredirectedBase* = proc(offset: gen_qpoint.QPoint): gen_qpaintdevice.QPaintDevice
proc onredirected*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseredirectedBase, offset: gen_qpoint.QPoint): gen_qpaintdevice.QPaintDevice) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseredirectedBase, offset: gen_qpoint.QPoint): gen_qpaintdevice.QPaintDevice
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_redirected(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_redirected(self: ptr cQsciScintillaBase, slot: int, offset: pointer): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_redirected ".} =
  type Cb = proc(super: QsciScintillaBaseredirectedBase, offset: gen_qpoint.QPoint): gen_qpaintdevice.QPaintDevice
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(offset: gen_qpoint.QPoint): auto =
    callVirtualBase_redirected(QsciScintillaBase(h: self), offset)
  let slotval1 = gen_qpoint.QPoint(h: offset)


  let virtualReturn = nimfunc[](superCall, slotval1 )

  virtualReturn.h
proc callVirtualBase_sharedPainter(self: QsciScintillaBase, ): gen_qpainter.QPainter =


  gen_qpainter.QPainter(h: fQsciScintillaBase_virtualbase_sharedPainter(self.h))

type QsciScintillaBasesharedPainterBase* = proc(): gen_qpainter.QPainter
proc onsharedPainter*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasesharedPainterBase): gen_qpainter.QPainter) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasesharedPainterBase): gen_qpainter.QPainter
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_sharedPainter(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_sharedPainter(self: ptr cQsciScintillaBase, slot: int): pointer {.exportc: "miqt_exec_callback_QsciScintillaBase_sharedPainter ".} =
  type Cb = proc(super: QsciScintillaBasesharedPainterBase): gen_qpainter.QPainter
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(): auto =
    callVirtualBase_sharedPainter(QsciScintillaBase(h: self), )

  let virtualReturn = nimfunc[](superCall )

  virtualReturn.h
proc callVirtualBase_timerEvent(self: QsciScintillaBase, event: gen_qcoreevent.QTimerEvent): void =


  fQsciScintillaBase_virtualbase_timerEvent(self.h, event.h)

type QsciScintillaBasetimerEventBase* = proc(event: gen_qcoreevent.QTimerEvent): void
proc ontimerEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasetimerEventBase, event: gen_qcoreevent.QTimerEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasetimerEventBase, event: gen_qcoreevent.QTimerEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_timerEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_timerEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_timerEvent ".} =
  type Cb = proc(super: QsciScintillaBasetimerEventBase, event: gen_qcoreevent.QTimerEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qcoreevent.QTimerEvent): auto =
    callVirtualBase_timerEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qcoreevent.QTimerEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_childEvent(self: QsciScintillaBase, event: gen_qcoreevent.QChildEvent): void =


  fQsciScintillaBase_virtualbase_childEvent(self.h, event.h)

type QsciScintillaBasechildEventBase* = proc(event: gen_qcoreevent.QChildEvent): void
proc onchildEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasechildEventBase, event: gen_qcoreevent.QChildEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasechildEventBase, event: gen_qcoreevent.QChildEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_childEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_childEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_childEvent ".} =
  type Cb = proc(super: QsciScintillaBasechildEventBase, event: gen_qcoreevent.QChildEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qcoreevent.QChildEvent): auto =
    callVirtualBase_childEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qcoreevent.QChildEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_customEvent(self: QsciScintillaBase, event: gen_qcoreevent.QEvent): void =


  fQsciScintillaBase_virtualbase_customEvent(self.h, event.h)

type QsciScintillaBasecustomEventBase* = proc(event: gen_qcoreevent.QEvent): void
proc oncustomEvent*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasecustomEventBase, event: gen_qcoreevent.QEvent): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasecustomEventBase, event: gen_qcoreevent.QEvent): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_customEvent(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_customEvent(self: ptr cQsciScintillaBase, slot: int, event: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_customEvent ".} =
  type Cb = proc(super: QsciScintillaBasecustomEventBase, event: gen_qcoreevent.QEvent): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(event: gen_qcoreevent.QEvent): auto =
    callVirtualBase_customEvent(QsciScintillaBase(h: self), event)
  let slotval1 = gen_qcoreevent.QEvent(h: event)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_connectNotify(self: QsciScintillaBase, signal: gen_qmetaobject.QMetaMethod): void =


  fQsciScintillaBase_virtualbase_connectNotify(self.h, signal.h)

type QsciScintillaBaseconnectNotifyBase* = proc(signal: gen_qmetaobject.QMetaMethod): void
proc onconnectNotify*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBaseconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBaseconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_connectNotify(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_connectNotify(self: ptr cQsciScintillaBase, slot: int, signal: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_connectNotify ".} =
  type Cb = proc(super: QsciScintillaBaseconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(signal: gen_qmetaobject.QMetaMethod): auto =
    callVirtualBase_connectNotify(QsciScintillaBase(h: self), signal)
  let slotval1 = gen_qmetaobject.QMetaMethod(h: signal)


  nimfunc[](superCall, slotval1)
proc callVirtualBase_disconnectNotify(self: QsciScintillaBase, signal: gen_qmetaobject.QMetaMethod): void =


  fQsciScintillaBase_virtualbase_disconnectNotify(self.h, signal.h)

type QsciScintillaBasedisconnectNotifyBase* = proc(signal: gen_qmetaobject.QMetaMethod): void
proc ondisconnectNotify*(self: QsciScintillaBase, slot: proc(super: QsciScintillaBasedisconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void) =
  # TODO check subclass
  type Cb = proc(super: QsciScintillaBasedisconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void
  var tmp = new Cb
  tmp[] = slot
  GC_ref(tmp)
  fcQsciScintillaBase_override_virtual_disconnectNotify(self.h, cast[int](addr tmp[]))

proc miqt_exec_callback_QsciScintillaBase_disconnectNotify(self: ptr cQsciScintillaBase, slot: int, signal: pointer): void {.exportc: "miqt_exec_callback_QsciScintillaBase_disconnectNotify ".} =
  type Cb = proc(super: QsciScintillaBasedisconnectNotifyBase, signal: gen_qmetaobject.QMetaMethod): void
  var nimfunc = cast[ptr Cb](cast[pointer](slot))
  proc superCall(signal: gen_qmetaobject.QMetaMethod): auto =
    callVirtualBase_disconnectNotify(QsciScintillaBase(h: self), signal)
  let slotval1 = gen_qmetaobject.QMetaMethod(h: signal)


  nimfunc[](superCall, slotval1)
proc delete*(self: QsciScintillaBase) =
  fcQsciScintillaBase_delete(self.h)
